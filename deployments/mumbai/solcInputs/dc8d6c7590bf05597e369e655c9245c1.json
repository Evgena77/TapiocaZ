{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@rari-capital/solmate/src/auth/Owned.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnerUpdated(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnerUpdated(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setOwner(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnerUpdated(msg.sender, newOwner);\n    }\n}\n"
    },
    "contracts/BaseTOFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport 'tapioca-sdk/dist/contracts/libraries/LzLib.sol';\r\nimport 'tapioca-sdk/dist/contracts/token/oft/v2/OFTV2.sol';\r\nimport './interfaces/IYieldBox.sol';\r\n\r\nimport './lib/TransferLib.sol';\r\n\r\n//\r\n//                 .(%%%%%%%%%%%%*       *\r\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\r\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\r\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\r\n//                                #####\r\n//                              #####\r\n//   #####%#####              *####*  ####%#####*\r\n//  (#########(              #####     ##########.\r\n//  ##########             #####.      .##########\r\n//                       ,####/\r\n//                      #####\r\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\r\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\r\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\r\n//               (####.\r\n//      ,((((  ,####(          /(((((((((((((\r\n//        *,  #####  ,(((((((((((((((((((((\r\n//          (####   ((((((((((((((((((((/\r\n//         ####*  (((((((((((((((((((\r\n//                     ,**//*,.\r\n\r\nabstract contract BaseTOFT is OFTV2 {\r\n    using SafeERC20 for IERC20;\r\n    using BytesLib for bytes;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    /// @notice The YieldBox address.\r\n    IYieldBox public yieldBox;\r\n    /// @notice If this wrapper is for an ERC20 or a native token.\r\n    bool public isNative;\r\n\r\n    uint16 public constant PT_YB_SEND_STRAT = 770;\r\n    uint16 public constant PT_YB_RETRIEVE_STRAT = 771;\r\n    uint16 public constant PT_YB_DEPOSIT = 772;\r\n    uint16 public constant PT_YB_WITHDRAW = 773;\r\n\r\n    /// @notice Total fees amassed by this contract, in `erc20`.\r\n    uint256 public totalFees;\r\n    /// @notice The ERC20 to wrap.\r\n    IERC20 public erc20;\r\n    /// @notice The host chain ID of the ERC20\r\n    uint256 public hostChainID;\r\n    /// @notice Decimal cache number of the ERC20.\r\n    uint8 internal _decimalCache;\r\n\r\n    // ************** //\r\n    // *** ERRORS *** //\r\n    // ************** //\r\n    /// @notice Error while depositing ETH assets to YieldBox.\r\n    error TOFT_YB_ETHDeposit();\r\n    /// @notice Code executed not on main chain.\r\n    error TOFT__NotHostChain();\r\n    /// @notice A zero amount was found\r\n    error TOFT_ZeroAmount();\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event YieldBoxDeposit(uint256 _amount);\r\n    event YieldBoxRetrieval(uint256 _amount);\r\n    event Wrap(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Unwrap(address indexed _from, address indexed _to, uint256 _amount);\r\n    event HarvestFees(uint256 _amount);\r\n\r\n    // ******************//\r\n    // *** MODIFIERS *** //\r\n    // ***************** //\r\n    /// @notice Require that the caller is on the host chain of the ERC20.\r\n    modifier onlyHostChain() {\r\n        if (block.chainid != hostChainID) {\r\n            revert TOFT__NotHostChain();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _lzEndpoint,\r\n        bool _isNative,\r\n        IERC20 _erc20,\r\n        IYieldBox _yieldBox,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimal,\r\n        uint256 _hostChainID\r\n    )\r\n        OFTV2(\r\n            string(abi.encodePacked('TapiocaOFT-', _name)),\r\n            string(abi.encodePacked('TOFT-', _symbol)),\r\n            _decimal / 2,\r\n            _lzEndpoint\r\n        )\r\n    {\r\n        if (_isNative) {\r\n            require(address(_erc20) == address(0), 'TOFT__NotNative');\r\n        }\r\n\r\n        erc20 = _erc20;\r\n        _decimalCache = _decimal;\r\n        hostChainID = _hostChainID;\r\n        isNative = _isNative;\r\n        yieldBox = _yieldBox;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice Decimal number of the ERC20\r\n    function decimals() public view override returns (uint8) {\r\n        if (_decimalCache == 0) return 18; //temporary fix for LZ _sharedDecimals check\r\n        return _decimalCache;\r\n    }\r\n\r\n    function estimateFees(\r\n        uint256 _feeBps,\r\n        uint256 _feeFraction,\r\n        uint256 _amount\r\n    ) public pure returns (uint256) {\r\n        return (_amount * _feeBps) / _feeFraction;\r\n    }\r\n\r\n    /// @notice Check if the current chain is the host chain of the ERC20.\r\n    function isHostChain() external view returns (bool) {\r\n        return block.chainid == hostChainID;\r\n    }\r\n\r\n    function getLzChainId() external view returns (uint16) {\r\n        return lzEndpoint.getChainId();\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    function sendToYB(\r\n        uint256 amount,\r\n        uint256 assetId,\r\n        uint16 lzDstChainId,\r\n        uint256 extraGasLimit,\r\n        address zroPaymentAddress,\r\n        bool strategyDeposit\r\n    ) external payable {\r\n        bytes32 toAddress = LzLib.addressToBytes32(msg.sender);\r\n        _debitFrom(msg.sender, lzEndpoint.getChainId(), toAddress, amount);\r\n\r\n        bytes memory lzPayload = abi.encode(\r\n            strategyDeposit ? PT_YB_SEND_STRAT : PT_YB_DEPOSIT,\r\n            LzLib.addressToBytes32(msg.sender),\r\n            toAddress,\r\n            amount,\r\n            assetId\r\n        );\r\n        bytes memory adapterParam = LzLib.buildDefaultAdapterParams(\r\n            extraGasLimit\r\n        );\r\n        _lzSend(\r\n            lzDstChainId,\r\n            lzPayload,\r\n            payable(msg.sender),\r\n            zroPaymentAddress,\r\n            adapterParam,\r\n            msg.value\r\n        );\r\n        emit SendToChain(lzDstChainId, msg.sender, toAddress, amount);\r\n    }\r\n\r\n    function retrieveFromYB(\r\n        uint256 amount,\r\n        uint256 assetId,\r\n        uint16 lzDstChainId,\r\n        address zroPaymentAddress,\r\n        bytes memory airdropAdapterParam,\r\n        bool strategyWithdrawal\r\n    ) external payable {\r\n        bytes32 toAddress = LzLib.addressToBytes32(msg.sender);\r\n\r\n        bytes memory lzPayload = abi.encode(\r\n            strategyWithdrawal ? PT_YB_RETRIEVE_STRAT : PT_YB_WITHDRAW,\r\n            LzLib.addressToBytes32(msg.sender),\r\n            toAddress,\r\n            amount,\r\n            0,\r\n            assetId,\r\n            zroPaymentAddress\r\n        );\r\n        _lzSend(\r\n            lzDstChainId,\r\n            lzPayload,\r\n            payable(msg.sender),\r\n            zroPaymentAddress,\r\n            airdropAdapterParam,\r\n            msg.value\r\n        );\r\n        emit SendToChain(lzDstChainId, msg.sender, toAddress, amount);\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    /// @notice Estimate the management fees for a wrap operation.\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload\r\n    ) internal virtual override {\r\n        uint256 packetType = _payload.toUint256(0); //because we are not using encodePacked\r\n\r\n        if (packetType == PT_YB_SEND_STRAT) {\r\n            _ybDeposit(_srcChainId, _payload, IERC20(address(this)), true);\r\n        } else if (packetType == PT_YB_RETRIEVE_STRAT) {\r\n            _ybWithdraw(_srcChainId, _payload, true);\r\n        } else if (packetType == PT_YB_DEPOSIT) {\r\n            _ybDeposit(_srcChainId, _payload, IERC20(address(this)), false);\r\n        } else if (packetType == PT_YB_WITHDRAW) {\r\n            _ybWithdraw(_srcChainId, _payload, false);\r\n        } else {\r\n            packetType = _payload.toUint8(0); //LZ uses encodePacked for payload\r\n            if (packetType == PT_SEND) {\r\n                _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n            } else if (packetType == PT_SEND_AND_CALL) {\r\n                _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\r\n            } else {\r\n                revert('OFTCoreV2: unknown packet type');\r\n            }\r\n        }\r\n    }\r\n\r\n    function _wrap(\r\n        address _toAddress,\r\n        uint256 _amount,\r\n        uint256 _mngmtFee,\r\n        uint256 _mngmtFeeFraction\r\n    ) internal virtual {\r\n        if (_mngmtFee > 0) {\r\n            uint256 feeAmount = estimateFees(\r\n                _mngmtFee,\r\n                _mngmtFeeFraction,\r\n                _amount\r\n            );\r\n\r\n            totalFees += feeAmount;\r\n            erc20.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount + feeAmount\r\n            );\r\n        } else {\r\n            erc20.safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n\r\n        _mint(_toAddress, _amount);\r\n        emit Wrap(msg.sender, _toAddress, _amount);\r\n    }\r\n\r\n    function _wrapNative(\r\n        address _toAddress,\r\n        uint256 _mngmtFee,\r\n        uint256 _mngmtFeeFraction\r\n    ) internal virtual {\r\n        if (msg.value == 0) {\r\n            revert TOFT_ZeroAmount();\r\n        }\r\n\r\n        uint256 toMint;\r\n\r\n        if (_mngmtFee > 0) {\r\n            uint256 feeAmount = estimateFees(\r\n                _mngmtFee,\r\n                _mngmtFeeFraction,\r\n                msg.value\r\n            );\r\n\r\n            totalFees += feeAmount;\r\n            toMint = msg.value - feeAmount;\r\n        }\r\n\r\n        _mint(_toAddress, toMint);\r\n        emit Wrap(msg.sender, _toAddress, toMint);\r\n    }\r\n\r\n    function _harvestFees(address to) internal virtual {\r\n        erc20.safeTransfer(to, totalFees);\r\n        totalFees = 0;\r\n        emit HarvestFees(totalFees);\r\n    }\r\n\r\n    function _unwrap(address _toAddress, uint256 _amount) internal virtual {\r\n        _burn(msg.sender, _amount);\r\n\r\n        if (isNative) {\r\n            TransferLib.safeTransferETH(_toAddress, _amount);\r\n        } else {\r\n            erc20.safeTransfer(_toAddress, _amount);\r\n        }\r\n\r\n        emit Unwrap(msg.sender, _toAddress, _amount);\r\n    }\r\n\r\n    function _ybDeposit(\r\n        uint16 _srcChainId,\r\n        bytes memory _payload,\r\n        IERC20 _erc20,\r\n        bool _strategyDeposit\r\n    ) internal virtual {\r\n        (\r\n            ,\r\n            bytes32 fromAddressBytes, //from\r\n            ,\r\n            uint256 amount,\r\n            uint256 assetId\r\n        ) = abi.decode(_payload, (uint16, bytes32, bytes32, uint256, uint256));\r\n\r\n        address onBehalfOf = _strategyDeposit\r\n            ? address(this)\r\n            : LzLib.bytes32ToAddress(fromAddressBytes);\r\n        _creditTo(_srcChainId, address(this), amount);\r\n        _depositToYieldbox(assetId, amount, _erc20, address(this), onBehalfOf);\r\n\r\n        emit ReceiveFromChain(_srcChainId, onBehalfOf, amount);\r\n    }\r\n\r\n    function _ybWithdraw(\r\n        uint16 _srcChainId,\r\n        bytes memory _payload,\r\n        bool _strategyWithdrawal\r\n    ) internal virtual {\r\n        (\r\n            ,\r\n            bytes32 from,\r\n            ,\r\n            uint256 _amount,\r\n            uint256 _share,\r\n            uint256 _assetId,\r\n            address _zroPaymentAddress\r\n        ) = abi.decode(\r\n                _payload,\r\n                (uint16, bytes32, bytes32, uint256, uint256, uint256, address)\r\n            );\r\n\r\n        address _from = LzLib.bytes32ToAddress(from);\r\n        _retrieveFromYieldBox(\r\n            _assetId,\r\n            _amount,\r\n            _share,\r\n            _strategyWithdrawal ? address(this) : _from,\r\n            address(this)\r\n        );\r\n\r\n        _debitFrom(\r\n            address(this),\r\n            lzEndpoint.getChainId(),\r\n            LzLib.addressToBytes32(address(this)),\r\n            _amount\r\n        );\r\n\r\n        bytes memory lzSendBackPayload = _encodeSendPayload(\r\n            from,\r\n            _ld2sd(_amount)\r\n        );\r\n        _lzSend(\r\n            _srcChainId,\r\n            lzSendBackPayload,\r\n            payable(this),\r\n            _zroPaymentAddress,\r\n            '',\r\n            address(this).balance\r\n        );\r\n        emit SendToChain(\r\n            _srcChainId,\r\n            _from,\r\n            LzLib.addressToBytes32(address(this)),\r\n            _amount\r\n        );\r\n\r\n        emit ReceiveFromChain(_srcChainId, _from, _amount);\r\n    }\r\n\r\n    /// @notice Receive an inter-chain transaction to execute a deposit inside YieldBox.\r\n    function _depositToYieldbox(\r\n        uint256 _assetId,\r\n        uint256 _amount,\r\n        IERC20 _erc20,\r\n        address _from,\r\n        address _to\r\n    ) private {\r\n        _erc20.approve(address(yieldBox), _amount);\r\n        yieldBox.depositAsset(_assetId, _from, _to, _amount, 0);\r\n\r\n        emit YieldBoxDeposit(_amount);\r\n    }\r\n\r\n    /// @notice Receive an inter-chain transaction to execute a deposit inside YieldBox.\r\n    function _retrieveFromYieldBox(\r\n        uint256 _assetId,\r\n        uint256 _amount,\r\n        uint256 _share,\r\n        address _from,\r\n        address _to\r\n    ) private {\r\n        yieldBox.withdraw(_assetId, _from, _to, _amount, _share);\r\n\r\n        emit YieldBoxRetrieval(_amount);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStargateRouterBase {\r\n    //for Router\r\n    struct lzTxObj {\r\n        uint256 dstGasForCall;\r\n        uint256 dstNativeAmount;\r\n        bytes dstNativeAddr;\r\n    }\r\n\r\n    function swap(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        lzTxObj memory _lzTxParams,\r\n        bytes calldata _to,\r\n        bytes calldata _payload\r\n    ) external payable;\r\n}\r\n\r\ninterface IStargateRouter is IStargateRouterBase {\r\n    //for RouterETH\r\n    function swapETH(\r\n        uint16 _dstChainId, // destination Stargate chainId\r\n        address payable _refundAddress, // refund additional messageFee to this address\r\n        bytes calldata _toAddress, // the receiver of the destination ETH\r\n        uint256 _amountLD, // the amount, in Local Decimals, to be swapped\r\n        uint256 _minAmountLD // the minimum amount accepted out on destination\r\n    ) external payable;\r\n}\r\n"
    },
    "contracts/interfaces/ITapiocaOFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ninterface ITapiocaOFT {\r\n    function totalFees() external view returns (uint256);\r\n\r\n    function erc20() external view returns (IERC20);\r\n\r\n    function hostChainID() external view returns (uint256);\r\n\r\n    function wrappedAmount(uint256 _amount) external view returns (uint256);\r\n\r\n    function wrap(address _toAddress, uint256 _amount) external;\r\n\r\n    function wrapNative(address _toAddress) external payable;\r\n\r\n    function harvestFees() external;\r\n\r\n    function unwrap(address _toAddress, uint256 _amount) external;\r\n\r\n    function isHostChain() external view returns (bool);\r\n\r\n    function balanceOf(address _holder) external view returns (uint256);\r\n\r\n    function isNative() external view returns (bool);\r\n\r\n    function extractUnderlying(uint256 _amount) external;\r\n\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IYieldBox.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IYieldBox {\r\n    function depositAsset(\r\n        uint256 assetId,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function withdraw(\r\n        uint256 assetId,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n"
    },
    "contracts/lib/TransferLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\n/// @notice common operations\r\nlibrary TransferLib {\r\n    /// @notice Author: Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            success := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        require(success, 'ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\n\r\ncontract ERC20Mock is ERC20 {\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    function mint(address _to, uint256 _amount) public {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport 'tapioca-sdk/dist/contracts/interfaces/ILayerZeroReceiver.sol';\r\nimport 'tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol';\r\nimport 'tapioca-sdk/dist/contracts/libraries/LzLib.sol';\r\n\r\n/*\r\nlike a real LayerZero endpoint but can be mocked, which handle message transmission, verification, and receipt.\r\n- blocking: LayerZero provides ordered delivery of messages from a given sender to a destination chain.\r\n- non-reentrancy: endpoint has a non-reentrancy guard for both the send() and receive(), respectively.\r\n- adapter parameters: allows UAs to add arbitrary transaction params in the send() function, like airdrop on destination chain.\r\nunlike a real LayerZero endpoint, it is\r\n- no messaging library versioning\r\n- send() will short circuit to lzReceive()\r\n- no user application configuration\r\n*/\r\ncontract LZEndpointMock is ILayerZeroEndpoint {\r\n    uint8 internal constant _NOT_ENTERED = 1;\r\n    uint8 internal constant _ENTERED = 2;\r\n\r\n    mapping(address => address) public lzEndpointLookup;\r\n\r\n    uint16 public mockChainId;\r\n    bool public nextMsgBlocked;\r\n\r\n    // fee config\r\n    RelayerFeeConfig public relayerFeeConfig;\r\n    ProtocolFeeConfig public protocolFeeConfig;\r\n    uint256 public oracleFee;\r\n    bytes public defaultAdapterParams;\r\n\r\n    // path = remote addrss + local address\r\n    // inboundNonce = [srcChainId][path].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    //todo: this is a hack\r\n    // outboundNonce = [dstChainId][srcAddress]\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n    //    // outboundNonce = [dstChainId][path].\r\n    //    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\r\n    // storedPayload = [srcChainId][path]\r\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\r\n    // msgToDeliver = [srcChainId][path]\r\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\r\n\r\n    // reentrancy guard\r\n    uint8 internal _send_entered_state = 1;\r\n    uint8 internal _receive_entered_state = 1;\r\n\r\n    struct ProtocolFeeConfig {\r\n        uint256 zroFee;\r\n        uint256 nativeBP;\r\n    }\r\n\r\n    struct RelayerFeeConfig {\r\n        uint128 dstPriceRatio; // 10^10\r\n        uint128 dstGasPriceInWei;\r\n        uint128 dstNativeAmtCap;\r\n        uint64 baseGas;\r\n        uint64 gasPerByte;\r\n    }\r\n\r\n    struct StoredPayload {\r\n        uint64 payloadLength;\r\n        address dstAddress;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    struct QueuedPayload {\r\n        address dstAddress;\r\n        uint64 nonce;\r\n        bytes payload;\r\n    }\r\n\r\n    modifier sendNonReentrant() {\r\n        require(\r\n            _send_entered_state == _NOT_ENTERED,\r\n            'LayerZeroMock: no send reentrancy'\r\n        );\r\n        _send_entered_state = _ENTERED;\r\n        _;\r\n        _send_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier receiveNonReentrant() {\r\n        require(\r\n            _receive_entered_state == _NOT_ENTERED,\r\n            'LayerZeroMock: no receive reentrancy'\r\n        );\r\n        _receive_entered_state = _ENTERED;\r\n        _;\r\n        _receive_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\r\n    event PayloadCleared(\r\n        uint16 srcChainId,\r\n        bytes srcAddress,\r\n        uint64 nonce,\r\n        address dstAddress\r\n    );\r\n    event PayloadStored(\r\n        uint16 srcChainId,\r\n        bytes srcAddress,\r\n        address dstAddress,\r\n        uint64 nonce,\r\n        bytes payload,\r\n        bytes reason\r\n    );\r\n    event ValueTransferFailed(address indexed to, uint256 indexed quantity);\r\n\r\n    constructor(uint16 _chainId) {\r\n        mockChainId = _chainId;\r\n\r\n        // init config\r\n        relayerFeeConfig = RelayerFeeConfig({\r\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\r\n            dstGasPriceInWei: 1e10,\r\n            dstNativeAmtCap: 1e19,\r\n            baseGas: 100,\r\n            gasPerByte: 1\r\n        });\r\n        protocolFeeConfig = ProtocolFeeConfig({zroFee: 1e18, nativeBP: 1000}); // BP 0.1\r\n        oracleFee = 1e16;\r\n        defaultAdapterParams = LzLib.buildDefaultAdapterParams(200000);\r\n    }\r\n\r\n    // ------------------------------ ILayerZeroEndpoint Functions ------------------------------\r\n    function send(\r\n        uint16 _chainId,\r\n        bytes memory _path,\r\n        bytes calldata _payload,\r\n        address payable _refundAddress,\r\n        address _zroPaymentAddress,\r\n        bytes memory _adapterParams\r\n    ) external payable override sendNonReentrant {\r\n        require(\r\n            _path.length == 40,\r\n            'LayerZeroMock: incorrect remote address size'\r\n        ); // only support evm chains\r\n\r\n        address dstAddr;\r\n        assembly {\r\n            dstAddr := mload(add(_path, 20))\r\n        }\r\n\r\n        address lzEndpoint = lzEndpointLookup[dstAddr];\r\n        require(\r\n            lzEndpoint != address(0),\r\n            'LayerZeroMock: destination LayerZero Endpoint not found'\r\n        );\r\n\r\n        // not handle zro token\r\n        bytes memory adapterParams = _adapterParams.length > 0\r\n            ? _adapterParams\r\n            : defaultAdapterParams;\r\n        (uint256 nativeFee, ) = estimateFees(\r\n            _chainId,\r\n            msg.sender,\r\n            _payload,\r\n            _zroPaymentAddress != address(0x0),\r\n            adapterParams\r\n        );\r\n        require(\r\n            msg.value >= nativeFee,\r\n            'LayerZeroMock: not enough native for fees'\r\n        );\r\n\r\n        uint64 nonce = ++outboundNonce[_chainId][msg.sender];\r\n\r\n        // refund if they send too much\r\n        uint256 amount = msg.value - nativeFee;\r\n        if (amount > 0) {\r\n            (bool success, ) = _refundAddress.call{value: amount}('');\r\n            require(success, 'LayerZeroMock: failed to refund');\r\n        }\r\n\r\n        // Mock the process of receiving msg on dst chain\r\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\r\n        (\r\n            ,\r\n            uint256 extraGas,\r\n            uint256 dstNativeAmt,\r\n            address payable dstNativeAddr\r\n        ) = LzLib.decodeAdapterParams(adapterParams);\r\n        if (dstNativeAmt > 0) {\r\n            (bool success, ) = dstNativeAddr.call{value: dstNativeAmt}('');\r\n            if (!success) {\r\n                emit ValueTransferFailed(dstNativeAddr, dstNativeAmt);\r\n            }\r\n        }\r\n\r\n        bytes memory srcUaAddress = abi.encodePacked(msg.sender, dstAddr); // cast this address to bytes\r\n        bytes memory payload = _payload;\r\n        LZEndpointMock(lzEndpoint).receivePayload(\r\n            mockChainId,\r\n            srcUaAddress,\r\n            dstAddr,\r\n            nonce,\r\n            extraGas,\r\n            payload\r\n        );\r\n    }\r\n\r\n    function receivePayload(\r\n        uint16 _srcChainId,\r\n        bytes calldata _path,\r\n        address _dstAddress,\r\n        uint64 _nonce,\r\n        uint256 _gasLimit,\r\n        bytes calldata _payload\r\n    ) external override receiveNonReentrant {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n\r\n        // assert and increment the nonce. no message shuffling\r\n        require(\r\n            _nonce == ++inboundNonce[_srcChainId][_path],\r\n            'LayerZeroMock: wrong nonce'\r\n        );\r\n\r\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\r\n        if (sp.payloadHash != bytes32(0)) {\r\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\r\n            QueuedPayload memory newMsg = QueuedPayload(\r\n                _dstAddress,\r\n                _nonce,\r\n                _payload\r\n            );\r\n\r\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\r\n            if (msgs.length > 0) {\r\n                // extend the array\r\n                msgs.push(newMsg);\r\n\r\n                // shift all the indexes up for pop()\r\n                for (uint256 i = 0; i < msgs.length - 1; i++) {\r\n                    msgs[i + 1] = msgs[i];\r\n                }\r\n\r\n                // put the newMsg at the bottom of the stack\r\n                msgs[0] = newMsg;\r\n            } else {\r\n                msgs.push(newMsg);\r\n            }\r\n        } else if (nextMsgBlocked) {\r\n            storedPayload[_srcChainId][_path] = StoredPayload(\r\n                uint64(_payload.length),\r\n                _dstAddress,\r\n                keccak256(_payload)\r\n            );\r\n            emit PayloadStored(\r\n                _srcChainId,\r\n                _path,\r\n                _dstAddress,\r\n                _nonce,\r\n                _payload,\r\n                bytes('')\r\n            );\r\n            // ensure the next msgs that go through are no longer blocked\r\n            nextMsgBlocked = false;\r\n        } else {\r\n            try\r\n                ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(\r\n                    _srcChainId,\r\n                    _path,\r\n                    _nonce,\r\n                    _payload\r\n                )\r\n            {} catch (bytes memory reason) {\r\n                storedPayload[_srcChainId][_path] = StoredPayload(\r\n                    uint64(_payload.length),\r\n                    _dstAddress,\r\n                    keccak256(_payload)\r\n                );\r\n                emit PayloadStored(\r\n                    _srcChainId,\r\n                    _path,\r\n                    _dstAddress,\r\n                    _nonce,\r\n                    _payload,\r\n                    reason\r\n                );\r\n                // ensure the next msgs that go through are no longer blocked\r\n                nextMsgBlocked = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getInboundNonce(uint16 _chainID, bytes calldata _path)\r\n        external\r\n        view\r\n        override\r\n        returns (uint64)\r\n    {\r\n        return inboundNonce[_chainID][_path];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainID, address _srcAddress)\r\n        external\r\n        view\r\n        override\r\n        returns (uint64)\r\n    {\r\n        return outboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function estimateFees(\r\n        uint16 _dstChainId,\r\n        address _userApplication,\r\n        bytes memory _payload,\r\n        bool _payInZRO,\r\n        bytes memory _adapterParams\r\n    ) public view override returns (uint256 nativeFee, uint256 zroFee) {\r\n        bytes memory adapterParams = _adapterParams.length > 0\r\n            ? _adapterParams\r\n            : defaultAdapterParams;\r\n\r\n        // Relayer Fee\r\n        uint256 relayerFee = _getRelayerFee(\r\n            _dstChainId,\r\n            1,\r\n            _userApplication,\r\n            _payload.length,\r\n            adapterParams\r\n        );\r\n\r\n        // LayerZero Fee\r\n        uint256 protocolFee = _getProtocolFees(\r\n            _payInZRO,\r\n            relayerFee,\r\n            oracleFee\r\n        );\r\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\r\n\r\n        // return the sum of fees\r\n        nativeFee = nativeFee + relayerFee + oracleFee;\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return mockChainId;\r\n    }\r\n\r\n    function retryPayload(\r\n        uint16 _srcChainId,\r\n        bytes calldata _path,\r\n        bytes calldata _payload\r\n    ) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        require(\r\n            sp.payloadHash != bytes32(0),\r\n            'LayerZeroMock: no stored payload'\r\n        );\r\n        require(\r\n            _payload.length == sp.payloadLength &&\r\n                keccak256(_payload) == sp.payloadHash,\r\n            'LayerZeroMock: invalid payload'\r\n        );\r\n\r\n        address dstAddress = sp.dstAddress;\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        uint64 nonce = inboundNonce[_srcChainId][_path];\r\n\r\n        ILayerZeroReceiver(dstAddress).lzReceive(\r\n            _srcChainId,\r\n            _path,\r\n            nonce,\r\n            _payload\r\n        );\r\n        emit PayloadCleared(_srcChainId, _path, nonce, dstAddress);\r\n    }\r\n\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _path)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        return sp.payloadHash != bytes32(0);\r\n    }\r\n\r\n    function getSendLibraryAddress(address)\r\n        external\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return address(this);\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address)\r\n        external\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return address(this);\r\n    }\r\n\r\n    function isSendingPayload() external view override returns (bool) {\r\n        return _send_entered_state == _ENTERED;\r\n    }\r\n\r\n    function isReceivingPayload() external view override returns (bool) {\r\n        return _receive_entered_state == _ENTERED;\r\n    }\r\n\r\n    function getConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        address, /*_ua*/\r\n        uint256 /*_configType*/\r\n    ) external pure override returns (bytes memory) {\r\n        return '';\r\n    }\r\n\r\n    function getSendVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getReceiveVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        uint256, /*_configType*/\r\n        bytes memory /*_config*/\r\n    ) external override {}\r\n\r\n    function setSendVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function setReceiveVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _path)\r\n        external\r\n        override\r\n    {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        // revert if no messages are cached. safeguard malicious UA behaviour\r\n        require(\r\n            sp.payloadHash != bytes32(0),\r\n            'LayerZeroMock: no stored payload'\r\n        );\r\n        require(sp.dstAddress == msg.sender, 'LayerZeroMock: invalid caller');\r\n\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        emit UaForceResumeReceive(_srcChainId, _path);\r\n\r\n        // resume the receiving of msgs after we force clear the \"stuck\" msg\r\n        _clearMsgQue(_srcChainId, _path);\r\n    }\r\n\r\n    // ------------------------------ Other Public/External Functions --------------------------------------------------\r\n\r\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\r\n    }\r\n\r\n    // used to simulate messages received get stored as a payload\r\n    function blockNextMsg() external {\r\n        nextMsgBlocked = true;\r\n    }\r\n\r\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr)\r\n        external\r\n    {\r\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\r\n    }\r\n\r\n    function setRelayerPrice(\r\n        uint128 _dstPriceRatio,\r\n        uint128 _dstGasPriceInWei,\r\n        uint128 _dstNativeAmtCap,\r\n        uint64 _baseGas,\r\n        uint64 _gasPerByte\r\n    ) external {\r\n        relayerFeeConfig.dstPriceRatio = _dstPriceRatio;\r\n        relayerFeeConfig.dstGasPriceInWei = _dstGasPriceInWei;\r\n        relayerFeeConfig.dstNativeAmtCap = _dstNativeAmtCap;\r\n        relayerFeeConfig.baseGas = _baseGas;\r\n        relayerFeeConfig.gasPerByte = _gasPerByte;\r\n    }\r\n\r\n    function setProtocolFee(uint256 _zroFee, uint256 _nativeBP) external {\r\n        protocolFeeConfig.zroFee = _zroFee;\r\n        protocolFeeConfig.nativeBP = _nativeBP;\r\n    }\r\n\r\n    function setOracleFee(uint256 _oracleFee) external {\r\n        oracleFee = _oracleFee;\r\n    }\r\n\r\n    function setDefaultAdapterParams(bytes memory _adapterParams) external {\r\n        defaultAdapterParams = _adapterParams;\r\n    }\r\n\r\n    // --------------------- Internal Functions ---------------------\r\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\r\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _path) internal {\r\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\r\n\r\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n        while (msgs.length > 0) {\r\n            QueuedPayload memory payload = msgs[msgs.length - 1];\r\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(\r\n                _srcChainId,\r\n                _path,\r\n                payload.nonce,\r\n                payload.payload\r\n            );\r\n            msgs.pop();\r\n        }\r\n    }\r\n\r\n    function _getProtocolFees(\r\n        bool _payInZro,\r\n        uint256 _relayerFee,\r\n        uint256 _oracleFee\r\n    ) internal view returns (uint256) {\r\n        if (_payInZro) {\r\n            return protocolFeeConfig.zroFee;\r\n        } else {\r\n            return\r\n                ((_relayerFee + _oracleFee) * protocolFeeConfig.nativeBP) /\r\n                10000;\r\n        }\r\n    }\r\n\r\n    function _getRelayerFee(\r\n        uint16, /* _dstChainId */\r\n        uint16, /* _outboundProofType */\r\n        address, /* _userApplication */\r\n        uint256 _payloadSize,\r\n        bytes memory _adapterParams\r\n    ) internal view returns (uint256) {\r\n        (uint16 txType, uint256 extraGas, uint256 dstNativeAmt, ) = LzLib\r\n            .decodeAdapterParams(_adapterParams);\r\n        uint256 totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\r\n        if (txType == 2) {\r\n            require(\r\n                relayerFeeConfig.dstNativeAmtCap >= dstNativeAmt,\r\n                'LayerZeroMock: dstNativeAmt too large '\r\n            );\r\n            totalRemoteToken += dstNativeAmt;\r\n        }\r\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\r\n        uint256 remoteGasTotal = relayerFeeConfig.dstGasPriceInWei *\r\n            (relayerFeeConfig.baseGas + extraGas);\r\n        totalRemoteToken += remoteGasTotal;\r\n\r\n        // tokenConversionRate = dstPrice / localPrice\r\n        // basePrice = totalRemoteToken * tokenConversionRate\r\n        uint256 basePrice = (totalRemoteToken *\r\n            relayerFeeConfig.dstPriceRatio) / 10**10;\r\n\r\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\r\n        uint256 pricePerByte = (relayerFeeConfig.dstGasPriceInWei *\r\n            relayerFeeConfig.gasPerByte *\r\n            relayerFeeConfig.dstPriceRatio) / 10**10;\r\n\r\n        return basePrice + _payloadSize * pricePerByte;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/StargateRouterETHMock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport '../interfaces/IStargateRouter.sol';\r\nimport './ERC20Mock.sol';\r\n\r\ncontract StargateRouterETHMock {\r\n    ERC20Mock public token;\r\n    IStargateRouterBase public router;\r\n\r\n    constructor(IStargateRouterBase _router, ERC20Mock _token) {}\r\n\r\n    function swapETH(\r\n        uint16 _dstChainId, // destination Stargate chainId\r\n        address payable _refundAddress, // refund additional messageFee to this address\r\n        bytes calldata _toAddress, // the receiver of the destination ETH\r\n        uint256 _amountLD, // the amount, in Local Decimals, to be swapped\r\n        uint256 _minAmountLD // the minimum amount accepted out on destination\r\n    ) external payable {\r\n        require(\r\n            msg.value > _amountLD,\r\n            'Stargate: msg.value must be > _amountLD'\r\n        );\r\n        IStargateRouterBase.lzTxObj memory data;\r\n        //simulate WETH wrap\r\n        token.mint(address(this), _amountLD);\r\n        token.approve(address(router), _amountLD);\r\n        router.swap(\r\n            _dstChainId,\r\n            1,\r\n            1,\r\n            _refundAddress,\r\n            _amountLD,\r\n            _minAmountLD,\r\n            data,\r\n            _toAddress,\r\n            ''\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/StargateRouterMock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport '../interfaces/IStargateRouter.sol';\r\n\r\ncontract StargateRouterMock is IStargateRouterBase {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) {\r\n        token = _token;\r\n    }\r\n\r\n    function swap(\r\n        uint16,\r\n        uint256,\r\n        uint256,\r\n        address payable _refundAddress,\r\n        uint256 _amountLD,\r\n        uint256,\r\n        IStargateRouter.lzTxObj memory,\r\n        bytes calldata _to,\r\n        bytes calldata\r\n    ) external payable override {\r\n        require(_amountLD > 0, 'Stargate: cannot swap 0');\r\n        require(\r\n            _refundAddress != address(0x0),\r\n            'Stargate: _refundAddress cannot be 0x0'\r\n        );\r\n        bytes32 converted = bytes32(_to[:32]);\r\n        address tempAddress = address(uint160(uint256(converted)));\r\n\r\n        token.transferFrom(msg.sender, address(this), _amountLD);\r\n        token.transfer(tempAddress, _amountLD);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/YieldBoxMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\n\r\ncontract YieldBoxMock {\r\n    mapping(address => uint256) public balances;\r\n    mapping(uint256 => address) public assets;\r\n\r\n    function addAsset(uint256 assetId, address asset) external {\r\n        assets[assetId] = asset;\r\n    }\r\n\r\n    function depositAsset(\r\n        uint256 assetId,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256\r\n    ) external returns (uint256 amountOut, uint256 shareOut) {\r\n        require(\r\n            ERC20(assets[assetId]).transferFrom(from, address(this), amount),\r\n            'failed transfer'\r\n        );\r\n        balances[to] += amount;\r\n        return (amount, amount);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 assetId,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256\r\n    ) external returns (uint256 amountOut, uint256 shareOut) {\r\n        require(balances[from] >= amount, 'not enough');\r\n        ERC20(assets[assetId]).transfer(to, amount);\r\n        balances[from] -= amount;\r\n        return (amount, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/mTapiocaOFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './TapiocaWrapper.sol';\r\nimport './BaseTOFT.sol';\r\nimport './lib/TransferLib.sol';\r\n\r\n//\r\n//                 .(%%%%%%%%%%%%*       *\r\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\r\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\r\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\r\n//                                #####\r\n//                              #####\r\n//   #####%#####              *####*  ####%#####*\r\n//  (#########(              #####     ##########.\r\n//  ##########             #####.      .##########\r\n//                       ,####/\r\n//                      #####\r\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\r\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\r\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\r\n//               (####.\r\n//      ,((((  ,####(          /(((((((((((((\r\n//        *,  #####  ,(((((((((((((((((((((\r\n//          (####   ((((((((((((((((((((/\r\n//         ####*  (((((((((((((((((((\r\n//                     ,**//*,.\r\n\r\n//Merged tOFT (eg: arbitrum eth, mainnet eth, optimism eth)\r\ncontract mTapiocaOFT is BaseTOFT {\r\n    using SafeERC20 for IERC20;\r\n    using BytesLib for bytes;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    /// @notice The TapiocaWrapper contract, owner of this contract.\r\n    TapiocaWrapper public tapiocaWrapper;\r\n    /// @notice allowed chains where you can unwrap your TOFT\r\n    mapping(uint256 => bool) public connectedChains;\r\n    /// @notice map of approved balancers\r\n    /// @dev a balancer can extract the underlying\r\n    mapping(address => bool) public balancers;\r\n\r\n    // ************** //\r\n    // *** ERRORS *** //\r\n    // ************** //\r\n    /// @notice Code executed not on one of the allowed chains\r\n    error TOFT_NotAllowedChain();\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event ConnectedChainStatusUpdated(uint256 _chain, bool _old, bool _new);\r\n    event BalancerStatusUpdated(\r\n        address indexed _balancer,\r\n        bool _bool,\r\n        bool _new\r\n    );\r\n    event Rebalancing(\r\n        address indexed _balancer,\r\n        uint256 _amount,\r\n        bool _isNative\r\n    );\r\n\r\n    // ******************//\r\n    // *** MODIFIERS *** //\r\n    // ***************** //\r\n\r\n    /// @notice Require that the caller is on the host chain of the ERC20.\r\n    modifier onlyAllowedChain() {\r\n        if (!connectedChains[block.chainid]) {\r\n            revert TOFT_NotAllowedChain();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _lzEndpoint,\r\n        bool _isNative,\r\n        IERC20 _erc20,\r\n        IYieldBox _yieldBox,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimal,\r\n        uint256 _hostChainID\r\n    )\r\n        BaseTOFT(\r\n            _lzEndpoint,\r\n            _isNative,\r\n            _erc20,\r\n            _yieldBox,\r\n            _name,\r\n            _symbol,\r\n            _decimal,\r\n            _hostChainID\r\n        )\r\n    {\r\n        tapiocaWrapper = TapiocaWrapper(msg.sender);\r\n\r\n        if (block.chainid == _hostChainID) {\r\n            connectedChains[_hostChainID] = true;\r\n            emit ConnectedChainStatusUpdated(_hostChainID, false, true);\r\n        }\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice Return the output amount of an ERC20 token wrap operation.\r\n    function wrappedAmount(uint256 _amount) public view returns (uint256) {\r\n        return\r\n            _amount -\r\n            estimateFees(\r\n                tapiocaWrapper.mngmtFee(),\r\n                tapiocaWrapper.mngmtFeeFraction(),\r\n                _amount\r\n            );\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice Wrap an ERC20 with a 1:1 ratio with a fee if existing.\r\n    /// @dev Since it can be executed only on the main chain, if an address exists on the OP chain it will not allowed to wrap.\r\n    /// @param _toAddress The address to wrap the ERC20 to.\r\n    /// @param _amount The amount of ERC20 to wrap.\r\n    function wrap(address _toAddress, uint256 _amount) external onlyHostChain {\r\n        _wrap(\r\n            _toAddress,\r\n            _amount,\r\n            tapiocaWrapper.mngmtFee(),\r\n            tapiocaWrapper.mngmtFeeFraction()\r\n        );\r\n    }\r\n\r\n    /// @notice Wrap a native token with a 1:1 ratio with a fee if existing.\r\n    /// @dev Since it can be executed only on the host chain, if an address exists on the linked chain it will not allowed to wrap.\r\n    /// @param _toAddress The address to wrap the tokens to.\r\n    function wrapNative(address _toAddress) external payable onlyHostChain {\r\n        _wrapNative(\r\n            _toAddress,\r\n            tapiocaWrapper.mngmtFee(),\r\n            tapiocaWrapper.mngmtFeeFraction()\r\n        );\r\n    }\r\n\r\n    /// @notice Harvest the fees collected by the contract. Called only on host chain.\r\n    function harvestFees() external onlyHostChain {\r\n        _harvestFees(address(tapiocaWrapper.owner()));\r\n    }\r\n\r\n    /// @notice Unwrap an ERC20/Native with a 1:1 ratio. Called only on host chain.\r\n    /// @param _toAddress The address to unwrap the tokens to.\r\n    /// @param _amount The amount of tokens to unwrap.\r\n    function unwrap(address _toAddress, uint256 _amount)\r\n        external\r\n        onlyAllowedChain\r\n    {\r\n        _unwrap(_toAddress, _amount);\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice updates a connected chain whitelist status\r\n    /// @param _chain the block.chainid of that specific chain\r\n    /// @param _status the new whitelist status\r\n    function updateConnectedChain(uint256 _chain, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit ConnectedChainStatusUpdated(\r\n            _chain,\r\n            connectedChains[_chain],\r\n            _status\r\n        );\r\n        connectedChains[_chain] = _status;\r\n    }\r\n\r\n    /// @notice updates a Balancer whitelist status\r\n    /// @param _balancer the operator address\r\n    /// @param _status the new whitelist status\r\n    function updateBalancerState(address _balancer, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit BalancerStatusUpdated(_balancer, balancers[_balancer], _status);\r\n        balancers[_balancer] = _status;\r\n    }\r\n\r\n    /// @notice extracts the underlying token/native for rebalancing\r\n    /// @param _amount the amount used for rebalancing\r\n    function extractUnderlying(uint256 _amount) external {\r\n        require(balancers[msg.sender], 'TapiocaOFT: not authorized');\r\n        \r\n        if (isNative) {\r\n            TransferLib.safeTransferETH(msg.sender, _amount);\r\n        } else {\r\n            erc20.safeTransfer(msg.sender, _amount);\r\n        }\r\n\r\n        emit Rebalancing(msg.sender, _amount, isNative);\r\n    }\r\n}\r\n"
    },
    "contracts/Rebalancing.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './interfaces/ITapiocaOFT.sol';\r\nimport './interfaces/IStargateRouter.sol';\r\nimport '@rari-capital/solmate/src/auth/Owned.sol';\r\n\r\n//\r\n//                 .(%%%%%%%%%%%%*       *\r\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\r\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\r\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\r\n//                                #####\r\n//                              #####\r\n//   #####%#####              *####*  ####%#####*\r\n//  (#########(              #####     ##########.\r\n//  ##########             #####.      .##########\r\n//                       ,####/\r\n//                      #####\r\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\r\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\r\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\r\n//               (####.\r\n//      ,((((  ,####(          /(((((((((((((\r\n//        *,  #####  ,(((((((((((((((((((((\r\n//          (####   ((((((((((((((((((((/\r\n//         ####*  (((((((((((((((((((\r\n//                     ,**//*,.\r\n\r\n/// Transfers tokens to other layers through Stargate\r\ncontract Rebalancing is Owned {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    /// @notice current OFT => chain => destination OFT\r\n    /// @dev chain ids (https://stargateprotocol.gitbook.io/stargate/developers/chain-ids):\r\n    ///         - Ethereum: 101\r\n    ///         - BNB: 102\r\n    ///         - Avalanche: 106\r\n    ///         - Polygon: 109\r\n    ///         - Arbitrum: 110\r\n    ///         - Optimism: 111\r\n    ///         - Fantom: 112\r\n    ///         - Metis: 151\r\n    ///     pool ids https://stargateprotocol.gitbook.io/stargate/developers/pool-ids\r\n    mapping(address => mapping(uint16 => OFTData)) public connectedOFTs;\r\n\r\n    struct OFTData {\r\n        uint256 srcPoolId;\r\n        uint256 dstPoolId;\r\n        address dstOft;\r\n        uint256 rebalanceable;\r\n    }\r\n\r\n    IStargateRouter immutable routerETH;\r\n    IStargateRouter immutable router;\r\n\r\n    uint256 private constant SLIPPAGE_PRECISION = 1e5;\r\n\r\n    // ************************ //\r\n    // *** EVENTS FUNCTIONS *** //\r\n    // ************************ //\r\n    event ConnectedChainUpdated(\r\n        address indexed _srcOft,\r\n        uint16 _dstChainId,\r\n        address indexed _dstOft\r\n    );\r\n    event Rebalanced(\r\n        address indexed _srcOft,\r\n        uint16 _dstChainId,\r\n        uint256 _slippage,\r\n        uint256 _amount,\r\n        bool _isNative\r\n    );\r\n    event RebalanceAmountUpdated(\r\n        address _srcOft,\r\n        uint16 _dstChainId,\r\n        uint256 _amount,\r\n        uint256 _totalAmount\r\n    );\r\n\r\n    // ************************ //\r\n    // *** ERRORS FUNCTIONS *** //\r\n    // ************************ //\r\n    error RouterNotValid();\r\n    error ExceedsBalance();\r\n    error DestinationNotValid();\r\n    error SlippageNotValid();\r\n    error FeeAmountNotSet();\r\n    error PoolInfoRequired();\r\n    error RebalanceAmountNotSet();\r\n\r\n    // *************************** //\r\n    // *** MODIFIERS FUNCTIONS *** //\r\n    // *************************** //\r\n    modifier onlyValidDestination(address _srcOft, uint16 _dstChainId) {\r\n        if (connectedOFTs[_srcOft][_dstChainId].dstOft == address(0))\r\n            revert DestinationNotValid();\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidSlippage(uint256 _slippage) {\r\n        if (_slippage >= 1e5) revert SlippageNotValid();\r\n        _;\r\n    }\r\n\r\n    constructor(address _routerETH, address _router) Owned(msg.sender) {\r\n        if (_router == address(0)) revert RouterNotValid();\r\n        if (_routerETH == address(0)) revert RouterNotValid();\r\n        routerETH = IStargateRouter(_routerETH);\r\n        router = IStargateRouter(_router);\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    function checker(address payable _srcOft, uint16 _dstChainId)\r\n        external\r\n        view\r\n        returns (bool canExec, bytes memory execPayload)\r\n    {\r\n        bytes memory ercData;\r\n        if (ITapiocaOFT(_srcOft).isNative()) {\r\n            ercData = abi.encode(\r\n                connectedOFTs[_srcOft][_dstChainId].srcPoolId,\r\n                connectedOFTs[_srcOft][_dstChainId].dstPoolId\r\n            );\r\n        }\r\n\r\n        canExec = connectedOFTs[_srcOft][_dstChainId].rebalanceable > 0;\r\n        execPayload = abi.encodeCall(\r\n            Rebalancing.rebalance,\r\n            (\r\n                _srcOft,\r\n                _dstChainId,\r\n                1e3, //1% slippage\r\n                connectedOFTs[_srcOft][_dstChainId].rebalanceable,\r\n                ercData\r\n            )\r\n        );\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    function rebalance(\r\n        address payable _srcOft,\r\n        uint16 _dstChainId,\r\n        uint256 _slippage,\r\n        uint256 _amount,\r\n        bytes memory _ercData\r\n    )\r\n        external\r\n        payable\r\n        onlyOwner\r\n        onlyValidDestination(_srcOft, _dstChainId)\r\n        onlyValidSlippage(_slippage)\r\n    {\r\n        if (connectedOFTs[_srcOft][_dstChainId].rebalanceable < _amount)\r\n            revert RebalanceAmountNotSet();\r\n\r\n        //extract\r\n        ITapiocaOFT(_srcOft).extractUnderlying(_amount);\r\n\r\n        //send\r\n        bool _isNative = ITapiocaOFT(_srcOft).isNative();\r\n        if (_isNative) {\r\n            if (msg.value <= _amount) revert FeeAmountNotSet();\r\n            _sendNative(_srcOft, _amount, _dstChainId, _slippage);\r\n        } else {\r\n            if (msg.value == 0) revert FeeAmountNotSet();\r\n            _sendToken(_srcOft, _amount, _dstChainId, _slippage, _ercData);\r\n        }\r\n\r\n        connectedOFTs[_srcOft][_dstChainId].rebalanceable -= _amount;\r\n        emit Rebalanced(_srcOft, _dstChainId, _slippage, _amount, _isNative);\r\n    }\r\n\r\n    function initConnectedOFT(\r\n        address _srcOft,\r\n        uint16 _dstChainId,\r\n        address _dstOft,\r\n        bytes memory _ercData\r\n    ) external onlyOwner {\r\n        bool isNative = ITapiocaOFT(_srcOft).isNative();\r\n        if (!isNative && _ercData.length == 0) revert PoolInfoRequired();\r\n\r\n        (uint256 _srcPoolId, uint256 _dstPoolId) = abi.decode(\r\n            _ercData,\r\n            (uint256, uint256)\r\n        );\r\n\r\n        OFTData memory oftData = OFTData({\r\n            srcPoolId: _srcPoolId,\r\n            dstPoolId: _dstPoolId,\r\n            dstOft: _dstOft,\r\n            rebalanceable: 0\r\n        });\r\n\r\n        connectedOFTs[_srcOft][_dstChainId] = oftData;\r\n        emit ConnectedChainUpdated(_srcOft, _dstChainId, _dstOft);\r\n    }\r\n\r\n    function addRebalanceAmount(\r\n        address _srcOft,\r\n        uint16 _dstChainId,\r\n        uint256 _amount\r\n    ) external onlyValidDestination(_srcOft, _dstChainId) onlyOwner {\r\n        connectedOFTs[_srcOft][_dstChainId].rebalanceable += _amount;\r\n        emit RebalanceAmountUpdated(\r\n            _srcOft,\r\n            _dstChainId,\r\n            _amount,\r\n            connectedOFTs[_srcOft][_dstChainId].rebalanceable\r\n        );\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _sendNative(\r\n        address payable _oft,\r\n        uint256 _amount,\r\n        uint16 _dstChainId,\r\n        uint256 _slippage\r\n    ) private {\r\n        if (address(this).balance < _amount) revert ExceedsBalance();\r\n\r\n        routerETH.swapETH(\r\n            _dstChainId,\r\n            _oft, //refund\r\n            abi.encodePacked(connectedOFTs[_oft][_dstChainId].dstOft),\r\n            _amount,\r\n            _computeMinAmount(_amount, _slippage)\r\n        );\r\n    }\r\n\r\n    function _sendToken(\r\n        address payable _oft,\r\n        uint256 _amount,\r\n        uint16 _dstChainId,\r\n        uint256 _slippage,\r\n        bytes memory _data\r\n    ) private {\r\n        if (ITapiocaOFT(_oft).erc20().balanceOf(address(this)) < _amount)\r\n            revert ExceedsBalance();\r\n\r\n        (uint256 _srcPoolId, uint256 _dstPoolId) = abi.decode(\r\n            _data,\r\n            (uint256, uint256)\r\n        );\r\n\r\n        IStargateRouter.lzTxObj memory _lzTxParams = IStargateRouterBase\r\n            .lzTxObj({\r\n                dstGasForCall: 0,\r\n                dstNativeAmount: msg.value,\r\n                dstNativeAddr: abi.encode(\r\n                    connectedOFTs[_oft][_dstChainId].dstOft\r\n                )\r\n            });\r\n\r\n        ITapiocaOFT(_oft).erc20().approve(address(router), _amount);\r\n        router.swap(\r\n            _dstChainId,\r\n            _srcPoolId,\r\n            _dstPoolId,\r\n            _oft, //refund,\r\n            _amount,\r\n            _computeMinAmount(_amount, _slippage),\r\n            _lzTxParams,\r\n            _lzTxParams.dstNativeAddr,\r\n            '0x'\r\n        );\r\n    }\r\n\r\n    function _computeMinAmount(uint256 _amount, uint256 _slippage)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _amount - ((_amount * _slippage) / SLIPPAGE_PRECISION);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/TapiocaOFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './TapiocaWrapper.sol';\r\nimport './BaseTOFT.sol';\r\n\r\n//\r\n//                 .(%%%%%%%%%%%%*       *\r\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\r\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\r\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\r\n//                                #####\r\n//                              #####\r\n//   #####%#####              *####*  ####%#####*\r\n//  (#########(              #####     ##########.\r\n//  ##########             #####.      .##########\r\n//                       ,####/\r\n//                      #####\r\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\r\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\r\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\r\n//               (####.\r\n//      ,((((  ,####(          /(((((((((((((\r\n//        *,  #####  ,(((((((((((((((((((((\r\n//          (####   ((((((((((((((((((((/\r\n//         ####*  (((((((((((((((((((\r\n//                     ,**//*,.\r\n\r\ncontract TapiocaOFT is BaseTOFT {\r\n    using SafeERC20 for IERC20;\r\n    using BytesLib for bytes;\r\n\r\n    /// @notice The TapiocaWrapper contract, owner of this contract.\r\n    TapiocaWrapper public tapiocaWrapper;\r\n\r\n    constructor(\r\n        address _lzEndpoint,\r\n        bool _isNative,\r\n        IERC20 _erc20,\r\n        IYieldBox _yieldBox,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimal,\r\n        uint256 _hostChainID\r\n    )\r\n        BaseTOFT(\r\n            _lzEndpoint,\r\n            _isNative,\r\n            _erc20,\r\n            _yieldBox,\r\n            _name,\r\n            _symbol,\r\n            _decimal,\r\n            _hostChainID\r\n        )\r\n    {\r\n        tapiocaWrapper = TapiocaWrapper(msg.sender);\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice Return the output amount of an ERC20 token wrap operation.\r\n    function wrappedAmount(uint256 _amount) public view returns (uint256) {\r\n        return\r\n            _amount -\r\n            estimateFees(\r\n                tapiocaWrapper.mngmtFee(),\r\n                tapiocaWrapper.mngmtFeeFraction(),\r\n                _amount\r\n            );\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice Wrap an ERC20 with a 1:1 ratio with a fee if existing.\r\n    /// @dev Since it can be executed only on the main chain, if an address exists on the OP chain it will not allowed to wrap.\r\n    /// @param _toAddress The address to wrap the ERC20 to.\r\n    /// @param _amount The amount of ERC20 to wrap.\r\n    function wrap(address _toAddress, uint256 _amount) external onlyHostChain {\r\n        _wrap(\r\n            _toAddress,\r\n            _amount,\r\n            tapiocaWrapper.mngmtFee(),\r\n            tapiocaWrapper.mngmtFeeFraction()\r\n        );\r\n    }\r\n\r\n    /// @notice Wrap a native token with a 1:1 ratio with a fee if existing.\r\n    /// @dev Since it can be executed only on the host chain, if an address exists on the linked chain it will not allowed to wrap.\r\n    /// @param _toAddress The address to wrap the tokens to.\r\n    function wrapNative(address _toAddress) external payable onlyHostChain {\r\n        _wrapNative(\r\n            _toAddress,\r\n            tapiocaWrapper.mngmtFee(),\r\n            tapiocaWrapper.mngmtFeeFraction()\r\n        );\r\n    }\r\n\r\n    /// @notice Harvest the fees collected by the contract. Called only on host chain.\r\n    function harvestFees() external onlyHostChain {\r\n        _harvestFees(address(tapiocaWrapper.owner()));\r\n    }\r\n\r\n    /// @notice Unwrap an ERC20/Native with a 1:1 ratio. Called only on host chain.\r\n    /// @param _toAddress The address to unwrap the tokens to.\r\n    /// @param _amount The amount of tokens to unwrap.\r\n    function unwrap(address _toAddress, uint256 _amount)\r\n        external\r\n        onlyHostChain\r\n    {\r\n        _unwrap(_toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/TapiocaWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\nimport './TapiocaOFT.sol';\r\nimport './mTapiocaOFT.sol';\r\nimport './interfaces/ITapiocaOFT.sol';\r\n\r\nimport '@openzeppelin/contracts/utils/Create2.sol';\r\nimport '@rari-capital/solmate/src/auth/Owned.sol';\r\n\r\ncontract TapiocaWrapper is Owned {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    /// @notice Management fee for a wrap operation. In BPS.\r\n    uint256 public mngmtFee;\r\n    /// @notice Denominator for `mngmtFee`.\r\n    uint256 public constant mngmtFeeFraction = 10000;\r\n\r\n    /// @notice Array of deployed TOFT contracts.\r\n    ITapiocaOFT[] public tapiocaOFTs;\r\n    /// @notice Array of harvestable TOFT fees.\r\n    ITapiocaOFT[] private harvestableTapiocaOFTs;\r\n    /// @notice Map of deployed TOFT contracts by ERC20.\r\n    mapping(address => ITapiocaOFT) public tapiocaOFTsByErc20;\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    /// @notice Called when a new OFT is deployed.\r\n    event CreateOFT(ITapiocaOFT indexed _tapiocaOFT, address indexed _erc20);\r\n    /// @notice Called when fees are harvested.\r\n    event HarvestFees(address indexed _caller);\r\n    /// @notice Called when fees are changed.\r\n    event SetFees(uint256 _newFee);\r\n\r\n    // ************** //\r\n    // *** ERRORS *** //\r\n    // ************** //\r\n    /// @notice If the TOFT is already deployed.\r\n    error TapiocaWrapper__AlreadyDeployed(address _erc20);\r\n    /// @notice Failed to deploy the TapiocaWrapper contract.\r\n    error TapiocaWrapper__FailedDeploy();\r\n    /// @notice The management fee is too high. Currently set to a max of 50 BPS or 0.5%.\r\n    error TapiocaWrapper__MngmtFeeTooHigh();\r\n    /// @notice The TapiocaOFT execution failed.\r\n    error TapiocaWrapper__TOFTExecutionFailed(bytes message);\r\n    /// @notice No TOFT has been deployed yet.\r\n    error TapiocaWrapper__NoTOFTDeployed();\r\n\r\n    constructor() Owned(msg.sender) {}\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice Return the number of TOFT contracts deployed on the current chain.\r\n    function tapiocaOFTLength() external view returns (uint256) {\r\n        return tapiocaOFTs.length;\r\n    }\r\n\r\n    /// @notice Return the number of harvestable TOFT contracts deployed on the current chain.\r\n    function harvestableTapiocaOFTsLength() external view returns (uint256) {\r\n        return harvestableTapiocaOFTs.length;\r\n    }\r\n\r\n    /// @notice Return the latest TOFT contract deployed on the current chain.\r\n    function lastTOFT() external view returns (ITapiocaOFT) {\r\n        if (tapiocaOFTs.length == 0) {\r\n            revert TapiocaWrapper__NoTOFTDeployed();\r\n        }\r\n        return tapiocaOFTs[tapiocaOFTs.length - 1];\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice Harvest fees from all the deployed TOFT contracts. Fees are transferred to the owner.\r\n    function harvestFees() external {\r\n        for (uint256 i = 0; i < harvestableTapiocaOFTs.length; i++) {\r\n            harvestableTapiocaOFTs[i].harvestFees();\r\n        }\r\n        emit HarvestFees(msg.sender);\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice Set the management fee for a wrap operation.\r\n    /// @custom:invariant Forbid a management fee higher than 0.5%.\r\n    /// @param _mngmtFee The new management fee for a wrap operation. In BPS.\r\n    function setMngmtFee(uint256 _mngmtFee) external onlyOwner {\r\n        if (_mngmtFee > 50) {\r\n            revert TapiocaWrapper__MngmtFeeTooHigh();\r\n        }\r\n\r\n        mngmtFee = _mngmtFee;\r\n        emit SetFees(mngmtFee);\r\n    }\r\n\r\n    /// @notice Execute the `_bytecode` against the `_toft`. Callable only by the owner.\r\n    /// @dev Used to call derived OFT functions to a TOFT contract.\r\n    /// @param _toft The TOFT contract to execute against.\r\n    /// @param _bytecode The executable bytecode of the TOFT contract.\r\n    /// @param _revertOnFailure Whether to revert on failure.\r\n    /// @return success If the execution was successful.\r\n    /// @return result The error message if the execution failed.\r\n    function executeTOFT(\r\n        address _toft,\r\n        bytes calldata _bytecode,\r\n        bool _revertOnFailure\r\n    ) external payable onlyOwner returns (bool success, bytes memory result) {\r\n        (success, result) = payable(_toft).call{value: msg.value}(_bytecode);\r\n        if (_revertOnFailure && !success) {\r\n            revert TapiocaWrapper__TOFTExecutionFailed(result);\r\n        }\r\n    }\r\n\r\n    /// @notice Deploy a new TOFT contract. Callable only by the owner.\r\n    /// @param _erc20 The ERC20 to wrap.\r\n    /// @param _bytecode The executable bytecode of the TOFT contract.\r\n    /// @param _salt Create2 salt.\r\n    function createTOFT(\r\n        address _erc20,\r\n        bytes calldata _bytecode,\r\n        bytes32 _salt,\r\n        bool _linked\r\n    ) external onlyOwner {\r\n        if (address(tapiocaOFTsByErc20[_erc20]) != address(0x0)) {\r\n            revert TapiocaWrapper__AlreadyDeployed(_erc20);\r\n        }\r\n\r\n        ITapiocaOFT iOFT = ITapiocaOFT(\r\n            _createTOFT(_erc20, _bytecode, _salt, _linked)\r\n        );\r\n        if (address(iOFT.erc20()) != _erc20) {\r\n            revert TapiocaWrapper__FailedDeploy();\r\n        }\r\n\r\n        tapiocaOFTs.push(iOFT);\r\n        tapiocaOFTsByErc20[_erc20] = iOFT;\r\n\r\n        if (iOFT.isHostChain()) {\r\n            harvestableTapiocaOFTs.push(iOFT);\r\n        }\r\n        emit CreateOFT(iOFT, _erc20);\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _createTOFT(\r\n        address _erc20,\r\n        bytes calldata _bytecode,\r\n        bytes32 _salt,\r\n        bool _linked\r\n    ) private returns (address) {\r\n        address oft;\r\n        if (!_linked) {\r\n            TapiocaOFT toft = TapiocaOFT(\r\n                payable(\r\n                    Create2.deploy(\r\n                        0,\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                keccak256('TapiocaWrapper'),\r\n                                address(this),\r\n                                _erc20,\r\n                                _salt\r\n                            )\r\n                        ),\r\n                        _bytecode\r\n                    )\r\n                )\r\n            );\r\n            oft = address(toft);\r\n        } else {\r\n            mTapiocaOFT toft = mTapiocaOFT(\r\n                payable(\r\n                    Create2.deploy(\r\n                        0,\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                keccak256('TapiocaWrapper'),\r\n                                address(this),\r\n                                _erc20,\r\n                                _salt\r\n                            )\r\n                        ),\r\n                        _bytecode\r\n                    )\r\n                )\r\n            );\r\n            oft = address(toft);\r\n        }\r\n        return oft;\r\n    }\r\n}\r\n"
    },
    "tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "tapioca-sdk/dist/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "tapioca-sdk/dist/contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "tapioca-sdk/dist/contracts/libraries/LzLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.6.0;\npragma experimental ABIEncoderV2;\n\nlibrary LzLib {\n    // LayerZero communication\n    struct CallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n    }\n\n    //---------------------------------------------------------------------------\n    // Address type handling\n\n    struct AirdropParams {\n        uint airdropAmount;\n        bytes32 airdropAddress;\n    }\n\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\n        } else {\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\n        }\n    }\n\n    // Build Adapter Params\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\n        // txType 1\n        // bytes  [2       32      ]\n        // fields [txType  extraGas]\n        return abi.encodePacked(uint16(1), _uaGas);\n    }\n\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\n        require(_params.airdropAmount > 0, \"Airdrop amount must be greater than 0\");\n        require(_params.airdropAddress != bytes32(0x0), \"Airdrop address must be set\");\n\n        // txType 2\n        // bytes  [2       32        32            bytes[]         ]\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\n    }\n\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    // Decode Adapter Params\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\n        assembly {\n            txType := mload(add(_adapterParams, 2))\n            uaGas := mload(add(_adapterParams, 34))\n        }\n        require(txType == 1 || txType == 2, \"Unsupported txType\");\n        require(uaGas > 0, \"Gas too low\");\n\n        if (txType == 2) {\n            assembly {\n                airdropAmount := mload(add(_adapterParams, 66))\n                airdropAddress := mload(add(_adapterParams, 86))\n            }\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // Address type handling\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\n        return address(uint160(uint(_bytes32Address)));\n    }\n\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\n        return bytes32(uint(uint160(_address)));\n    }\n}\n"
    },
    "tapioca-sdk/dist/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/ILayerZeroReceiver.sol\";\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\nimport \"../util/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using BytesLib for bytes;\n\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\n\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\n\n    constructor(address _endpoint) {\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\n        _checkPayloadSize(_dstChainId, _payload.length);\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\n        uint providedGasLimit = _getGasLimit(_adapterParams);\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\n        if (payloadSizeLimit == 0) { // use default if not set\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\n        }\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _path;\n        emit SetTrustedRemote(_srcChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\n        require(_minGas > 0, \"LzApp: invalid minGas\");\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    // if the size is 0, it means default size limit\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\n        payloadSizeLimitLookup[_dstChainId] = _size;\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n}\n"
    },
    "tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../util/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\n        // try-catch all errors/exceptions\n        if (!success) {\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\n    }\n\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "tapioca-sdk/dist/contracts/token/oft/v2/BaseOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OFTCoreV2.sol\";\nimport \"./IOFTV2.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\n\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\n    }\n\n    /************************************************************************\n    * public functions\n    ************************************************************************/\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) public payable virtual override {\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\n    }\n\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\n        _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\n    }\n\n    /************************************************************************\n    * public view functions\n    ************************************************************************/\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\n    }\n\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\n    }\n\n    function circulatingSupply() public view virtual override returns (uint);\n\n    function token() public view virtual override returns (address);\n}\n"
    },
    "tapioca-sdk/dist/contracts/token/oft/v2/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "tapioca-sdk/dist/contracts/token/oft/v2/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface IOFTReceiverV2 {\n    /**\n     * @dev Called by the OFT contract when tokens are received from source chain.\n     * @param _srcChainId The chain id of the source chain.\n     * @param _srcAddress The address of the OFT token contract on the source chain.\n     * @param _nonce The nonce of the transaction on the source chain.\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\n     * @param _amount The amount of tokens to transfer.\n     * @param _payload Additional data with no specified format.\n     */\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\n}\n"
    },
    "tapioca-sdk/dist/contracts/token/oft/v2/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\n\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\n}\n"
    },
    "tapioca-sdk/dist/contracts/token/oft/v2/OFTCoreV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../../lzApp/NonblockingLzApp.sol\";\nimport \"../../../util/ExcessivelySafeCall.sol\";\nimport \"./ICommonOFT.sol\";\nimport \"./IOFTReceiverV2.sol\";\n\nabstract contract OFTCoreV2 is NonblockingLzApp {\n    using BytesLib for bytes;\n    using ExcessivelySafeCall for address;\n\n    uint public constant NO_EXTRA_GAS = 0;\n\n    // packet type\n    uint8 public constant PT_SEND = 0;\n    uint8 public constant PT_SEND_AND_CALL = 1;\n\n    uint8 public immutable sharedDecimals;\n\n    bool public useCustomAdapterParams;\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\n\n    /**\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n     * `_nonce` is the outbound nonce\n     */\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\n\n    /**\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\n     * `_nonce` is the inbound nonce.\n     */\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\n\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\n\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\n\n    event NonContractAddress(address _address);\n\n    // _sharedDecimals should be the minimum decimals on all chains\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\n        sharedDecimals = _sharedDecimals;\n    }\n\n    /************************************************************************\n    * public functions\n    ************************************************************************/\n    function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\n        require(_msgSender() == address(this), \"OFTCore: caller must be OFTCore\");\n\n        // send\n        _amount = _transferFrom(address(this), _to, _amount);\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\n\n        // call\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\n    }\n\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\n        useCustomAdapterParams = _useCustomAdapterParams;\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\n    }\n\n    /************************************************************************\n    * internal functions\n    ************************************************************************/\n    function _estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\n        // mock the payload for sendFrom()\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\n        // mock the payload for sendAndCall()\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\n        uint8 packetType = _payload.toUint8(0);\n\n        if (packetType == PT_SEND) {\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\n        } else if (packetType == PT_SEND_AND_CALL) {\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\n        } else {\n            revert(\"OFTCore: unknown packet type\");\n        }\n    }\n\n    function _send(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\n\n        (amount,) = _removeDust(_amount);\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\n        require(amount > 0, \"OFTCore: amount too small\");\n\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\n    }\n\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\n\n        if (to == address(0)) {\n            to = address(0xdead);\n        }\n\n        uint amount = _sd2ld(amountSD);\n        amount = _creditTo(_srcChainId, to, amount);\n\n        emit ReceiveFromChain(_srcChainId, to, amount);\n    }\n\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\n\n        (amount,) = _removeDust(_amount);\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\n        require(amount > 0, \"OFTCore: amount too small\");\n\n        // encode the msg.sender into the payload instead of _from\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\n    }\n\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\n\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\n        uint amount = _sd2ld(amountSD);\n\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\n        if (!credited) {\n            amount = _creditTo(_srcChainId, address(this), amount);\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\n        }\n\n        if (!_isContract(to)) {\n            emit NonContractAddress(to);\n            return;\n        }\n\n        // workaround for stack too deep\n        uint16 srcChainId = _srcChainId;\n        bytes memory srcAddress = _srcAddress;\n        uint64 nonce = _nonce;\n        bytes memory payload = _payload;\n        bytes32 from_ = from;\n        address to_ = to;\n        uint amount_ = amount;\n        bytes memory payloadForCall_ = payloadForCall;\n\n        // no gas limit for the call if retry\n        uint gas = credited ? gasleft() : gasForCall;\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas));\n\n        if (success) {\n            bytes32 hash = keccak256(payload);\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\n        } else {\n            // store the failed message into the nonblockingLzApp\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\n        }\n    }\n\n    function _isContract(address _account) internal view returns (bool) {\n        return _account.code.length > 0;\n    }\n\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\n        if (useCustomAdapterParams) {\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\n        } else {\n            require(_adapterParams.length == 0, \"OFTCore: _adapterParams must be empty.\");\n        }\n    }\n\n    function _ld2sd(uint _amount) internal virtual view returns (uint64) {\n        uint amountSD = _amount / _ld2sdRate();\n        require(amountSD <= type(uint64).max, \"OFTCore: amountSD overflow\");\n        return uint64(amountSD);\n    }\n\n    function _sd2ld(uint64 _amountSD) internal virtual view returns (uint) {\n        return _amountSD * _ld2sdRate();\n    }\n\n    function _removeDust(uint _amount) internal virtual view returns (uint amountAfter, uint dust) {\n        dust = _amount % _ld2sdRate();\n        amountAfter = _amount - dust;\n    }\n\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal virtual view returns (bytes memory) {\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\n    }\n\n    function _decodeSendPayload(bytes memory _payload) internal virtual view returns (address to, uint64 amountSD) {\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \"OFTCore: invalid payload\");\n\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\n        amountSD = _payload.toUint64(33);\n    }\n\n    function _encodeSendAndCallPayload(address _from, bytes32 _toAddress, uint64 _amountSD, bytes memory _payload, uint64 _dstGasForCall) internal virtual view returns (bytes memory) {\n        return abi.encodePacked(\n            PT_SEND_AND_CALL,\n            _toAddress,\n            _amountSD,\n            _addressToBytes32(_from),\n            _dstGasForCall,\n            _payload\n        );\n    }\n\n    function _decodeSendAndCallPayload(bytes memory _payload) internal virtual view returns (bytes32 from, address to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \"OFTCore: invalid payload\");\n\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\n        amountSD = _payload.toUint64(33);\n        from = _payload.toBytes32(41);\n        dstGasForCall = _payload.toUint64(73);\n        payload = _payload.slice(81, _payload.length - 81);\n    }\n\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\n        return bytes32(uint(uint160(_address)));\n    }\n\n    function _debitFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount) internal virtual returns (uint);\n\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\n\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\n\n    function _ld2sdRate() internal view virtual returns (uint);\n}\n"
    },
    "tapioca-sdk/dist/contracts/token/oft/v2/OFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./BaseOFTV2.sol\";\n\n\ncontract OFTV2 is BaseOFTV2, ERC20 {\n\n    uint internal immutable ld2sdRate;\n\n    constructor(string memory _name, string memory _symbol, uint8 _sharedDecimals, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\n        uint8 decimals = decimals();\n\n        require(_sharedDecimals <= decimals, \"OFT: sharedDecimals must be <= decimals\");\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\n    }\n\n    /************************************************************************\n    * public functions\n    ************************************************************************/\n    function circulatingSupply() public view virtual override returns (uint) {\n        return totalSupply();\n    }\n\n    function token() public view virtual override returns (address) {\n        return address(this);\n    }\n\n    /************************************************************************\n    * internal functions\n    ************************************************************************/\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\n        address spender = _msgSender();\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\n        _burn(_from, _amount);\n        return _amount;\n    }\n\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\n        _mint(_toAddress, _amount);\n        return _amount;\n    }\n\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\n        address spender = _msgSender();\n        // if transfer from this contract, no need to check allowance\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\n        _transfer(_from, _to, _amount);\n        return _amount;\n    }\n\n    function _ld2sdRate() internal view virtual override returns (uint) {\n        return ld2sdRate;\n    }\n}\n"
    },
    "tapioca-sdk/dist/contracts/util/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n        // Store the length of the first bytes array at the beginning of\n        // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n        // Maintain a memory counter for the current write location in the\n        // temp bytes array by adding the 32 bytes for the array length to\n        // the starting location.\n            let mc := add(tempBytes, 0x20)\n        // Stop copying when the memory counter reaches the length of the\n        // first bytes array.\n            let end := add(mc, length)\n\n            for {\n            // Initialize a copy counter to the start of the _preBytes data,\n            // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n            // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n            // Write the _preBytes data into the tempBytes memory 32 bytes\n            // at a time.\n                mstore(mc, mload(cc))\n            }\n\n        // Add the length of _postBytes to the current length of tempBytes\n        // and store it as the new length in the first 32 bytes of the\n        // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n        // Move the memory counter back from a multiple of 0x20 to the\n        // actual end of the _preBytes data.\n            mc := end\n        // Stop copying when the memory counter reaches the new combined\n        // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n        // Update the free-memory pointer by padding our last write location\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n        // next 32 byte block, then round down to the nearest multiple of\n        // 32. If the sum of the length of the two arrays is zero then add\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n            not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n        // Read the first 32 bytes of _preBytes storage, which is the length\n        // of the array. (We don't need to use the offset into the slot\n        // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n        // Arrays of 31 bytes or less have an even value in their slot,\n        // while longer arrays have an odd value. The actual length is\n        // the slot divided by two for odd values, and the lowest order\n        // byte divided by two for even values.\n        // If the slot is even, bitwise and the slot with 255 and divide by\n        // two to get the length. If the slot is odd, bitwise and the slot\n        // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n            // Since the new array still fits in the slot, we just need to\n            // update the contents of the slot.\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                _preBytes.slot,\n                // all the modifications to the slot are inside this\n                // next block\n                add(\n                // we can just add to the slot contents because the\n                // bytes we want to change are the LSBs\n                fslot,\n                add(\n                mul(\n                div(\n                // load the bytes from memory\n                mload(add(_postBytes, 0x20)),\n                // zero all bytes to the right\n                exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n                ),\n                // increase length by the double of the memory\n                // bytes length\n                mul(mlength, 2)\n                )\n                )\n                )\n            }\n            case 1 {\n            // The stored value fits in the slot, but the combined value\n            // will exceed it.\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // The contents of the _postBytes array start 32 bytes into\n            // the structure. Our first read should obtain the `submod`\n            // bytes that can fit into the unused space in the last word\n            // of the stored array. To get this, we read 32 bytes starting\n            // from `submod`, so the data we read overlaps with the array\n            // contents by `submod` bytes. Masking the lowest-order\n            // `submod` bytes allows us to add that value directly to the\n            // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                sc,\n                add(\n                and(\n                fslot,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                ),\n                and(mload(mc), mask)\n                )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n            // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // Copy over the first `submod` bytes of the new data as in\n            // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n            // The first word of the slice result is potentially a partial\n            // word read from the original array. To read it, we calculate\n            // the length of that partial word and start copying that many\n            // bytes into the array. The first word we copy will start with\n            // data we don't care about, but the last `lengthmod` bytes will\n            // land at the beginning of the contents of the new array. When\n            // we're done copying, we overwrite the full first word with\n            // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n            // The multiplication in the next line is necessary\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\n            // the following copy loop was copying the origin's length\n            // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                // The multiplication in the next line has the same exact purpose\n                // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n            //update free-memory pointer\n            //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n            //zero out the 32 bytes slice we are about to return\n            //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                    // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    view\n    returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n        // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n        // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                    // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                    // cb is a circuit breaker in the for loop since there's\n                    //  no said feature for inline assembly loops\n                    // cb = 1 - don't breaker\n                    // cb = 0 - break\n                        let cb := 1\n\n                    // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                            // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "tapioca-sdk/dist/contracts/util/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n            _gas, // gas\n            _target, // recipient\n            0, // ether value\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n            _gas, // gas\n            _target, // recipient\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n    internal\n    pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n        // load the first word of\n            let _word := mload(add(_buf, 0x20))\n        // mask out the top 4 bytes\n        // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}