{
  "address": "0xE0d65BB69921d039E388fC864608F7dD2b7CBcf5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isNative",
          "type": "bool"
        },
        {
          "internalType": "contract IERC20",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "contract IYieldBox",
          "name": "_yieldBox",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimal",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_hostChainID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TOFT_YB_ETHDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOFT_ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOFT__NotHostChain",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "CallOFTReceivedSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "HarvestFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NonContractAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Unwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Wrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "YieldBoxDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "YieldBoxRetrieval",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_EXTRA_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND_AND_CALL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_YB_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_YB_RETRIEVE_STRAT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_YB_SEND_STRAT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_YB_WITHDRAW",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_from",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasForCall",
          "type": "uint256"
        }
      ],
      "name": "callOnOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "creditedPackets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeFraction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendAndCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLzChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hostChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isHostChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "lzDstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "airdropAdapterParam",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "strategyWithdrawal",
          "type": "bool"
        }
      ],
      "name": "retrieveFromYB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "lzDstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "extraGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "strategyDeposit",
          "type": "bool"
        }
      ],
      "name": "sendToYB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tapiocaWrapper",
      "outputs": [
        {
          "internalType": "contract TapiocaWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        }
      ],
      "name": "wrapNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wrappedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldBox",
      "outputs": [
        {
          "internalType": "contract IYieldBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8b84a155d9d7fe1222d4ade5c57877044b551466757fd4bd17c24869da8a39e2",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0xE0d65BB69921d039E388fC864608F7dD2b7CBcf5",
    "transactionIndex": 0,
    "gasUsed": "5188979",
    "logsBloom": "0x
    "blockHash": "0x0000465300001238ec9ddfd8d5bf06ea752984c9d7af7b5d1f978681d70987b9",
    "transactionHash": "0x8b84a155d9d7fe1222d4ade5c57877044b551466757fd4bd17c24869da8a39e2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14112944,
        "transactionHash": "0x8b84a155d9d7fe1222d4ade5c57877044b551466757fd4bd17c24869da8a39e2",
        "address": "0xE0d65BB69921d039E388fC864608F7dD2b7CBcf5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0000465300001238ec9ddfd8d5bf06ea752984c9d7af7b5d1f978681d70987b9"
      }
    ],
    "blockNumber": 14112944,
    "cumulativeGasUsed": "5188979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbfD2135BFfbb0B5378b56643c2Df8a87552Bfa23",
    false,
    "0x8ec7f2746d9098a627134091bc9afb4629a8642d",
    "0xCA3604D7Df34a785D20Cbe7A0Bbd0AF54E9FeF9e",
    "Test",
    "TTT",
    18,
    "4002"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b23b1aa0454745721eceb1b6d5d1dfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"contract IYieldBox\",\"name\":\"_yieldBox\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_hostChainID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TOFT_YB_ETHDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOFT_ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOFT__NotHostChain\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CallOFTReceivedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HarvestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NonContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"YieldBoxDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"YieldBoxRetrieval\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_EXTRA_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND_AND_CALL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_YB_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_YB_RETRIEVE_STRAT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_YB_SEND_STRAT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_YB_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_from\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasForCall\",\"type\":\"uint256\"}],\"name\":\"callOnOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"creditedPackets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendAndCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLzChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hostChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHostChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lzDstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"airdropAdapterParam\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"strategyWithdrawal\",\"type\":\"bool\"}],\"name\":\"retrieveFromYB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lzDstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"extraGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"strategyDeposit\",\"type\":\"bool\"}],\"name\":\"sendToYB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tapiocaWrapper\",\"outputs\":[{\"internalType\":\"contract TapiocaWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"wrapNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrappedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBox\",\"outputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"circulatingSupply()\":{\"details\":\"returns the circulating amount of tokens on current chain\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"estimateSendFee(uint16,bytes32,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendFrom(address,uint16,bytes32,uint256,(address,address,bytes))\":{\"details\":\"send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"token()\":{\"details\":\"returns the address of the ERC20 token\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unwrap(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to unwrap.\",\"_toAddress\":\"The address to unwrap the tokens to.\"}},\"wrap(address,uint256)\":{\"details\":\"Since it can be executed only on the main chain, if an address exists on the OP chain it will not allowed to wrap.\",\"params\":{\"_amount\":\"The amount of ERC20 to wrap.\",\"_toAddress\":\"The address to wrap the ERC20 to.\"}},\"wrapNative(address)\":{\"details\":\"Since it can be executed only on the host chain, if an address exists on the linked chain it will not allowed to wrap.\",\"params\":{\"_toAddress\":\"The address to wrap the tokens to.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"TOFT_YB_ETHDeposit()\":[{\"notice\":\"Error while depositing ETH assets to YieldBox.\"}],\"TOFT_ZeroAmount()\":[{\"notice\":\"A zero amount was found\"}],\"TOFT__NotHostChain()\":[{\"notice\":\"Code executed not on main chain.\"}]},\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Decimal number of the ERC20\"},\"erc20()\":{\"notice\":\"The ERC20 to wrap.\"},\"harvestFees()\":{\"notice\":\"Harvest the fees collected by the contract. Called only on host chain.\"},\"hostChainID()\":{\"notice\":\"The host chain ID of the ERC20\"},\"isHostChain()\":{\"notice\":\"Check if the current chain is the host chain of the ERC20.\"},\"isNative()\":{\"notice\":\"If this wrapper is for an ERC20 or a native token.\"},\"tapiocaWrapper()\":{\"notice\":\"The TapiocaWrapper contract, owner of this contract.\"},\"totalFees()\":{\"notice\":\"Total fees amassed by this contract, in `erc20`.\"},\"unwrap(address,uint256)\":{\"notice\":\"Unwrap an ERC20/Native with a 1:1 ratio. Called only on host chain.\"},\"wrap(address,uint256)\":{\"notice\":\"Wrap an ERC20 with a 1:1 ratio with a fee if existing.\"},\"wrapNative(address)\":{\"notice\":\"Wrap a native token with a 1:1 ratio with a fee if existing.\"},\"wrappedAmount(uint256)\":{\"notice\":\"Return the output amount of an ERC20 token wrap operation.\"},\"yieldBox()\":{\"notice\":\"The YieldBox address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TapiocaOFT.sol\":\"TapiocaOFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafc07f37809f74d9c66d6461cc0f85fb5147ab855acd0acc30af4b2272130c61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7e91c80b0dd1a14a19cb9e661b99924043adab6d9d893bbfcf3a6a3dc23a6743\",\"license\":\"AGPL-3.0-only\"},\"contracts/BaseTOFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport 'tapioca-sdk/dist/contracts/libraries/LzLib.sol';\\r\\nimport 'tapioca-sdk/dist/contracts/token/oft/v2/OFTV2.sol';\\r\\nimport './interfaces/IYieldBox.sol';\\r\\n\\r\\nimport './lib/TransferLib.sol';\\r\\n\\r\\n//\\r\\n//                 .(%%%%%%%%%%%%*       *\\r\\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\\r\\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\\r\\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\\r\\n//                                #####\\r\\n//                              #####\\r\\n//   #####%#####              *####*  ####%#####*\\r\\n//  (#########(              #####     ##########.\\r\\n//  ##########             #####.      .##########\\r\\n//                       ,####/\\r\\n//                      #####\\r\\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\\r\\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\\r\\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\\r\\n//               (####.\\r\\n//      ,((((  ,####(          /(((((((((((((\\r\\n//        *,  #####  ,(((((((((((((((((((((\\r\\n//          (####   ((((((((((((((((((((/\\r\\n//         ####*  (((((((((((((((((((\\r\\n//                     ,**//*,.\\r\\n\\r\\nabstract contract BaseTOFT is OFTV2 {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    /// @notice The YieldBox address.\\r\\n    IYieldBox public yieldBox;\\r\\n    /// @notice If this wrapper is for an ERC20 or a native token.\\r\\n    bool public isNative;\\r\\n\\r\\n    uint16 public constant PT_YB_SEND_STRAT = 770;\\r\\n    uint16 public constant PT_YB_RETRIEVE_STRAT = 771;\\r\\n    uint16 public constant PT_YB_DEPOSIT = 772;\\r\\n    uint16 public constant PT_YB_WITHDRAW = 773;\\r\\n\\r\\n    /// @notice Total fees amassed by this contract, in `erc20`.\\r\\n    uint256 public totalFees;\\r\\n    /// @notice The ERC20 to wrap.\\r\\n    IERC20 public erc20;\\r\\n    /// @notice The host chain ID of the ERC20\\r\\n    uint256 public hostChainID;\\r\\n    /// @notice Decimal cache number of the ERC20.\\r\\n    uint8 internal _decimalCache;\\r\\n\\r\\n    // ************** //\\r\\n    // *** ERRORS *** //\\r\\n    // ************** //\\r\\n    /// @notice Error while depositing ETH assets to YieldBox.\\r\\n    error TOFT_YB_ETHDeposit();\\r\\n    /// @notice Code executed not on main chain.\\r\\n    error TOFT__NotHostChain();\\r\\n    /// @notice A zero amount was found\\r\\n    error TOFT_ZeroAmount();\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n    event YieldBoxDeposit(uint256 _amount);\\r\\n    event YieldBoxRetrieval(uint256 _amount);\\r\\n    event Wrap(address indexed _from, address indexed _to, uint256 _amount);\\r\\n    event Unwrap(address indexed _from, address indexed _to, uint256 _amount);\\r\\n    event HarvestFees(uint256 _amount);\\r\\n\\r\\n    // ******************//\\r\\n    // *** MODIFIERS *** //\\r\\n    // ***************** //\\r\\n    /// @notice Require that the caller is on the host chain of the ERC20.\\r\\n    modifier onlyHostChain() {\\r\\n        if (block.chainid != hostChainID) {\\r\\n            revert TOFT__NotHostChain();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _lzEndpoint,\\r\\n        bool _isNative,\\r\\n        IERC20 _erc20,\\r\\n        IYieldBox _yieldBox,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimal,\\r\\n        uint256 _hostChainID\\r\\n    )\\r\\n        OFTV2(\\r\\n            string(abi.encodePacked('TapiocaOFT-', _name)),\\r\\n            string(abi.encodePacked('TOFT-', _symbol)),\\r\\n            _decimal / 2,\\r\\n            _lzEndpoint\\r\\n        )\\r\\n    {\\r\\n        if (_isNative) {\\r\\n            require(address(_erc20) == address(0), 'TOFT__NotNative');\\r\\n        }\\r\\n\\r\\n        erc20 = _erc20;\\r\\n        _decimalCache = _decimal;\\r\\n        hostChainID = _hostChainID;\\r\\n        isNative = _isNative;\\r\\n        yieldBox = _yieldBox;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    // ********************** //\\r\\n    // *** VIEW FUNCTIONS *** //\\r\\n    // ********************** //\\r\\n    /// @notice Decimal number of the ERC20\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        if (_decimalCache == 0) return 18; //temporary fix for LZ _sharedDecimals check\\r\\n        return _decimalCache;\\r\\n    }\\r\\n\\r\\n    function estimateFees(\\r\\n        uint256 _feeBps,\\r\\n        uint256 _feeFraction,\\r\\n        uint256 _amount\\r\\n    ) public pure returns (uint256) {\\r\\n        return (_amount * _feeBps) / _feeFraction;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the current chain is the host chain of the ERC20.\\r\\n    function isHostChain() external view returns (bool) {\\r\\n        return block.chainid == hostChainID;\\r\\n    }\\r\\n\\r\\n    function getLzChainId() external view returns (uint16) {\\r\\n        return lzEndpoint.getChainId();\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n    function sendToYB(\\r\\n        uint256 amount,\\r\\n        uint256 assetId,\\r\\n        uint16 lzDstChainId,\\r\\n        uint256 extraGasLimit,\\r\\n        address zroPaymentAddress,\\r\\n        bool strategyDeposit\\r\\n    ) external payable {\\r\\n        bytes32 toAddress = LzLib.addressToBytes32(msg.sender);\\r\\n        _debitFrom(msg.sender, lzEndpoint.getChainId(), toAddress, amount);\\r\\n\\r\\n        bytes memory lzPayload = abi.encode(\\r\\n            strategyDeposit ? PT_YB_SEND_STRAT : PT_YB_DEPOSIT,\\r\\n            LzLib.addressToBytes32(msg.sender),\\r\\n            toAddress,\\r\\n            amount,\\r\\n            assetId\\r\\n        );\\r\\n        bytes memory adapterParam = LzLib.buildDefaultAdapterParams(\\r\\n            extraGasLimit\\r\\n        );\\r\\n        _lzSend(\\r\\n            lzDstChainId,\\r\\n            lzPayload,\\r\\n            payable(msg.sender),\\r\\n            zroPaymentAddress,\\r\\n            adapterParam,\\r\\n            msg.value\\r\\n        );\\r\\n        emit SendToChain(lzDstChainId, msg.sender, toAddress, amount);\\r\\n    }\\r\\n\\r\\n    function retrieveFromYB(\\r\\n        uint256 amount,\\r\\n        uint256 assetId,\\r\\n        uint16 lzDstChainId,\\r\\n        address zroPaymentAddress,\\r\\n        bytes memory airdropAdapterParam,\\r\\n        bool strategyWithdrawal\\r\\n    ) external payable {\\r\\n        bytes32 toAddress = LzLib.addressToBytes32(msg.sender);\\r\\n\\r\\n        bytes memory lzPayload = abi.encode(\\r\\n            strategyWithdrawal ? PT_YB_RETRIEVE_STRAT : PT_YB_WITHDRAW,\\r\\n            LzLib.addressToBytes32(msg.sender),\\r\\n            toAddress,\\r\\n            amount,\\r\\n            0,\\r\\n            assetId,\\r\\n            zroPaymentAddress\\r\\n        );\\r\\n        _lzSend(\\r\\n            lzDstChainId,\\r\\n            lzPayload,\\r\\n            payable(msg.sender),\\r\\n            zroPaymentAddress,\\r\\n            airdropAdapterParam,\\r\\n            msg.value\\r\\n        );\\r\\n        emit SendToChain(lzDstChainId, msg.sender, toAddress, amount);\\r\\n    }\\r\\n\\r\\n    // ************************* //\\r\\n    // *** PRIVATE FUNCTIONS *** //\\r\\n    // ************************* //\\r\\n    /// @notice Estimate the management fees for a wrap operation.\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual override {\\r\\n        uint256 packetType = _payload.toUint256(0); //because we are not using encodePacked\\r\\n\\r\\n        if (packetType == PT_YB_SEND_STRAT) {\\r\\n            _ybDeposit(_srcChainId, _payload, IERC20(address(this)), true);\\r\\n        } else if (packetType == PT_YB_RETRIEVE_STRAT) {\\r\\n            _ybWithdraw(_srcChainId, _payload, true);\\r\\n        } else if (packetType == PT_YB_DEPOSIT) {\\r\\n            _ybDeposit(_srcChainId, _payload, IERC20(address(this)), false);\\r\\n        } else if (packetType == PT_YB_WITHDRAW) {\\r\\n            _ybWithdraw(_srcChainId, _payload, false);\\r\\n        } else {\\r\\n            packetType = _payload.toUint8(0); //LZ uses encodePacked for payload\\r\\n            if (packetType == PT_SEND) {\\r\\n                _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n            } else if (packetType == PT_SEND_AND_CALL) {\\r\\n                _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n            } else {\\r\\n                revert('OFTCoreV2: unknown packet type');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _wrap(\\r\\n        address _toAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _mngmtFee,\\r\\n        uint256 _mngmtFeeFraction\\r\\n    ) internal virtual {\\r\\n        if (_mngmtFee > 0) {\\r\\n            uint256 feeAmount = estimateFees(\\r\\n                _mngmtFee,\\r\\n                _mngmtFeeFraction,\\r\\n                _amount\\r\\n            );\\r\\n\\r\\n            totalFees += feeAmount;\\r\\n            erc20.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount + feeAmount\\r\\n            );\\r\\n        } else {\\r\\n            erc20.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n\\r\\n        _mint(_toAddress, _amount);\\r\\n        emit Wrap(msg.sender, _toAddress, _amount);\\r\\n    }\\r\\n\\r\\n    function _wrapNative(\\r\\n        address _toAddress,\\r\\n        uint256 _mngmtFee,\\r\\n        uint256 _mngmtFeeFraction\\r\\n    ) internal virtual {\\r\\n        if (msg.value == 0) {\\r\\n            revert TOFT_ZeroAmount();\\r\\n        }\\r\\n\\r\\n        uint256 toMint;\\r\\n\\r\\n        if (_mngmtFee > 0) {\\r\\n            uint256 feeAmount = estimateFees(\\r\\n                _mngmtFee,\\r\\n                _mngmtFeeFraction,\\r\\n                msg.value\\r\\n            );\\r\\n\\r\\n            totalFees += feeAmount;\\r\\n            toMint = msg.value - feeAmount;\\r\\n        }\\r\\n\\r\\n        _mint(_toAddress, toMint);\\r\\n        emit Wrap(msg.sender, _toAddress, toMint);\\r\\n    }\\r\\n\\r\\n    function _harvestFees(address to) internal virtual {\\r\\n        erc20.safeTransfer(to, totalFees);\\r\\n        totalFees = 0;\\r\\n        emit HarvestFees(totalFees);\\r\\n    }\\r\\n\\r\\n    function _unwrap(address _toAddress, uint256 _amount) internal virtual {\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        if (isNative) {\\r\\n            TransferLib.safeTransferETH(_toAddress, _amount);\\r\\n        } else {\\r\\n            erc20.safeTransfer(_toAddress, _amount);\\r\\n        }\\r\\n\\r\\n        emit Unwrap(msg.sender, _toAddress, _amount);\\r\\n    }\\r\\n\\r\\n    function _ybDeposit(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _payload,\\r\\n        IERC20 _erc20,\\r\\n        bool _strategyDeposit\\r\\n    ) internal virtual {\\r\\n        (\\r\\n            ,\\r\\n            bytes32 fromAddressBytes, //from\\r\\n            ,\\r\\n            uint256 amount,\\r\\n            uint256 assetId\\r\\n        ) = abi.decode(_payload, (uint16, bytes32, bytes32, uint256, uint256));\\r\\n\\r\\n        address onBehalfOf = _strategyDeposit\\r\\n            ? address(this)\\r\\n            : LzLib.bytes32ToAddress(fromAddressBytes);\\r\\n        _creditTo(_srcChainId, address(this), amount);\\r\\n        _depositToYieldbox(assetId, amount, _erc20, address(this), onBehalfOf);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, onBehalfOf, amount);\\r\\n    }\\r\\n\\r\\n    function _ybWithdraw(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _payload,\\r\\n        bool _strategyWithdrawal\\r\\n    ) internal virtual {\\r\\n        (\\r\\n            ,\\r\\n            bytes32 from,\\r\\n            ,\\r\\n            uint256 _amount,\\r\\n            uint256 _share,\\r\\n            uint256 _assetId,\\r\\n            address _zroPaymentAddress\\r\\n        ) = abi.decode(\\r\\n                _payload,\\r\\n                (uint16, bytes32, bytes32, uint256, uint256, uint256, address)\\r\\n            );\\r\\n\\r\\n        address _from = LzLib.bytes32ToAddress(from);\\r\\n        _retrieveFromYieldBox(\\r\\n            _assetId,\\r\\n            _amount,\\r\\n            _share,\\r\\n            _strategyWithdrawal ? address(this) : _from,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        _debitFrom(\\r\\n            address(this),\\r\\n            lzEndpoint.getChainId(),\\r\\n            LzLib.addressToBytes32(address(this)),\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        bytes memory lzSendBackPayload = _encodeSendPayload(\\r\\n            from,\\r\\n            _ld2sd(_amount)\\r\\n        );\\r\\n        _lzSend(\\r\\n            _srcChainId,\\r\\n            lzSendBackPayload,\\r\\n            payable(this),\\r\\n            _zroPaymentAddress,\\r\\n            '',\\r\\n            address(this).balance\\r\\n        );\\r\\n        emit SendToChain(\\r\\n            _srcChainId,\\r\\n            _from,\\r\\n            LzLib.addressToBytes32(address(this)),\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, _from, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Receive an inter-chain transaction to execute a deposit inside YieldBox.\\r\\n    function _depositToYieldbox(\\r\\n        uint256 _assetId,\\r\\n        uint256 _amount,\\r\\n        IERC20 _erc20,\\r\\n        address _from,\\r\\n        address _to\\r\\n    ) private {\\r\\n        _erc20.approve(address(yieldBox), _amount);\\r\\n        yieldBox.depositAsset(_assetId, _from, _to, _amount, 0);\\r\\n\\r\\n        emit YieldBoxDeposit(_amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Receive an inter-chain transaction to execute a deposit inside YieldBox.\\r\\n    function _retrieveFromYieldBox(\\r\\n        uint256 _assetId,\\r\\n        uint256 _amount,\\r\\n        uint256 _share,\\r\\n        address _from,\\r\\n        address _to\\r\\n    ) private {\\r\\n        yieldBox.withdraw(_assetId, _from, _to, _amount, _share);\\r\\n\\r\\n        emit YieldBoxRetrieval(_amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb3d586d03847aebeeed72c0ce471aa0bd7bd8c3c7a88e353c7cf7f733fdc8d\",\"license\":\"UNLICENSED\"},\"contracts/TapiocaOFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './TapiocaWrapper.sol';\\r\\nimport './BaseTOFT.sol';\\r\\n\\r\\n//\\r\\n//                 .(%%%%%%%%%%%%*       *\\r\\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\\r\\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\\r\\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\\r\\n//                                #####\\r\\n//                              #####\\r\\n//   #####%#####              *####*  ####%#####*\\r\\n//  (#########(              #####     ##########.\\r\\n//  ##########             #####.      .##########\\r\\n//                       ,####/\\r\\n//                      #####\\r\\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\\r\\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\\r\\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\\r\\n//               (####.\\r\\n//      ,((((  ,####(          /(((((((((((((\\r\\n//        *,  #####  ,(((((((((((((((((((((\\r\\n//          (####   ((((((((((((((((((((/\\r\\n//         ####*  (((((((((((((((((((\\r\\n//                     ,**//*,.\\r\\n\\r\\ncontract TapiocaOFT is BaseTOFT {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    /// @notice The TapiocaWrapper contract, owner of this contract.\\r\\n    TapiocaWrapper public tapiocaWrapper;\\r\\n\\r\\n    constructor(\\r\\n        address _lzEndpoint,\\r\\n        bool _isNative,\\r\\n        IERC20 _erc20,\\r\\n        IYieldBox _yieldBox,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimal,\\r\\n        uint256 _hostChainID\\r\\n    )\\r\\n        BaseTOFT(\\r\\n            _lzEndpoint,\\r\\n            _isNative,\\r\\n            _erc20,\\r\\n            _yieldBox,\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _decimal,\\r\\n            _hostChainID\\r\\n        )\\r\\n    {\\r\\n        tapiocaWrapper = TapiocaWrapper(msg.sender);\\r\\n    }\\r\\n\\r\\n    // ********************** //\\r\\n    // *** VIEW FUNCTIONS *** //\\r\\n    // ********************** //\\r\\n    /// @notice Return the output amount of an ERC20 token wrap operation.\\r\\n    function wrappedAmount(uint256 _amount) public view returns (uint256) {\\r\\n        return\\r\\n            _amount -\\r\\n            estimateFees(\\r\\n                tapiocaWrapper.mngmtFee(),\\r\\n                tapiocaWrapper.mngmtFeeFraction(),\\r\\n                _amount\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n    /// @notice Wrap an ERC20 with a 1:1 ratio with a fee if existing.\\r\\n    /// @dev Since it can be executed only on the main chain, if an address exists on the OP chain it will not allowed to wrap.\\r\\n    /// @param _toAddress The address to wrap the ERC20 to.\\r\\n    /// @param _amount The amount of ERC20 to wrap.\\r\\n    function wrap(address _toAddress, uint256 _amount) external onlyHostChain {\\r\\n        _wrap(\\r\\n            _toAddress,\\r\\n            _amount,\\r\\n            tapiocaWrapper.mngmtFee(),\\r\\n            tapiocaWrapper.mngmtFeeFraction()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Wrap a native token with a 1:1 ratio with a fee if existing.\\r\\n    /// @dev Since it can be executed only on the host chain, if an address exists on the linked chain it will not allowed to wrap.\\r\\n    /// @param _toAddress The address to wrap the tokens to.\\r\\n    function wrapNative(address _toAddress) external payable onlyHostChain {\\r\\n        _wrapNative(\\r\\n            _toAddress,\\r\\n            tapiocaWrapper.mngmtFee(),\\r\\n            tapiocaWrapper.mngmtFeeFraction()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Harvest the fees collected by the contract. Called only on host chain.\\r\\n    function harvestFees() external onlyHostChain {\\r\\n        _harvestFees(address(tapiocaWrapper.owner()));\\r\\n    }\\r\\n\\r\\n    /// @notice Unwrap an ERC20/Native with a 1:1 ratio. Called only on host chain.\\r\\n    /// @param _toAddress The address to unwrap the tokens to.\\r\\n    /// @param _amount The amount of tokens to unwrap.\\r\\n    function unwrap(address _toAddress, uint256 _amount)\\r\\n        external\\r\\n        onlyHostChain\\r\\n    {\\r\\n        _unwrap(_toAddress, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x805b8694a0df52b642502835f5cec88fabe20c0efb35a14d2710ed22608f0df3\",\"license\":\"UNLICENSED\"},\"contracts/TapiocaWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport './TapiocaOFT.sol';\\r\\nimport './mTapiocaOFT.sol';\\r\\nimport './interfaces/ITapiocaOFT.sol';\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/Create2.sol';\\r\\nimport '@rari-capital/solmate/src/auth/Owned.sol';\\r\\n\\r\\ncontract TapiocaWrapper is Owned {\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    /// @notice Management fee for a wrap operation. In BPS.\\r\\n    uint256 public mngmtFee;\\r\\n    /// @notice Denominator for `mngmtFee`.\\r\\n    uint256 public constant mngmtFeeFraction = 10000;\\r\\n\\r\\n    /// @notice Array of deployed TOFT contracts.\\r\\n    ITapiocaOFT[] public tapiocaOFTs;\\r\\n    /// @notice Array of harvestable TOFT fees.\\r\\n    ITapiocaOFT[] private harvestableTapiocaOFTs;\\r\\n    /// @notice Map of deployed TOFT contracts by ERC20.\\r\\n    mapping(address => ITapiocaOFT) public tapiocaOFTsByErc20;\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n    /// @notice Called when a new OFT is deployed.\\r\\n    event CreateOFT(ITapiocaOFT indexed _tapiocaOFT, address indexed _erc20);\\r\\n    /// @notice Called when fees are harvested.\\r\\n    event HarvestFees(address indexed _caller);\\r\\n    /// @notice Called when fees are changed.\\r\\n    event SetFees(uint256 _newFee);\\r\\n\\r\\n    // ************** //\\r\\n    // *** ERRORS *** //\\r\\n    // ************** //\\r\\n    /// @notice If the TOFT is already deployed.\\r\\n    error TapiocaWrapper__AlreadyDeployed(address _erc20);\\r\\n    /// @notice Failed to deploy the TapiocaWrapper contract.\\r\\n    error TapiocaWrapper__FailedDeploy();\\r\\n    /// @notice The management fee is too high. Currently set to a max of 50 BPS or 0.5%.\\r\\n    error TapiocaWrapper__MngmtFeeTooHigh();\\r\\n    /// @notice The TapiocaOFT execution failed.\\r\\n    error TapiocaWrapper__TOFTExecutionFailed(bytes message);\\r\\n    /// @notice No TOFT has been deployed yet.\\r\\n    error TapiocaWrapper__NoTOFTDeployed();\\r\\n\\r\\n    constructor() Owned(msg.sender) {}\\r\\n\\r\\n    // ********************** //\\r\\n    // *** VIEW FUNCTIONS *** //\\r\\n    // ********************** //\\r\\n    /// @notice Return the number of TOFT contracts deployed on the current chain.\\r\\n    function tapiocaOFTLength() external view returns (uint256) {\\r\\n        return tapiocaOFTs.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Return the number of harvestable TOFT contracts deployed on the current chain.\\r\\n    function harvestableTapiocaOFTsLength() external view returns (uint256) {\\r\\n        return harvestableTapiocaOFTs.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Return the latest TOFT contract deployed on the current chain.\\r\\n    function lastTOFT() external view returns (ITapiocaOFT) {\\r\\n        if (tapiocaOFTs.length == 0) {\\r\\n            revert TapiocaWrapper__NoTOFTDeployed();\\r\\n        }\\r\\n        return tapiocaOFTs[tapiocaOFTs.length - 1];\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n\\r\\n    /// @notice Harvest fees from all the deployed TOFT contracts. Fees are transferred to the owner.\\r\\n    function harvestFees() external {\\r\\n        for (uint256 i = 0; i < harvestableTapiocaOFTs.length; i++) {\\r\\n            harvestableTapiocaOFTs[i].harvestFees();\\r\\n        }\\r\\n        emit HarvestFees(msg.sender);\\r\\n    }\\r\\n\\r\\n    // *********************** //\\r\\n    // *** OWNER FUNCTIONS *** //\\r\\n    // *********************** //\\r\\n    /// @notice Set the management fee for a wrap operation.\\r\\n    /// @custom:invariant Forbid a management fee higher than 0.5%.\\r\\n    /// @param _mngmtFee The new management fee for a wrap operation. In BPS.\\r\\n    function setMngmtFee(uint256 _mngmtFee) external onlyOwner {\\r\\n        if (_mngmtFee > 50) {\\r\\n            revert TapiocaWrapper__MngmtFeeTooHigh();\\r\\n        }\\r\\n\\r\\n        mngmtFee = _mngmtFee;\\r\\n        emit SetFees(mngmtFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Execute the `_bytecode` against the `_toft`. Callable only by the owner.\\r\\n    /// @dev Used to call derived OFT functions to a TOFT contract.\\r\\n    /// @param _toft The TOFT contract to execute against.\\r\\n    /// @param _bytecode The executable bytecode of the TOFT contract.\\r\\n    /// @param _revertOnFailure Whether to revert on failure.\\r\\n    /// @return success If the execution was successful.\\r\\n    /// @return result The error message if the execution failed.\\r\\n    function executeTOFT(\\r\\n        address _toft,\\r\\n        bytes calldata _bytecode,\\r\\n        bool _revertOnFailure\\r\\n    ) external payable onlyOwner returns (bool success, bytes memory result) {\\r\\n        (success, result) = payable(_toft).call{value: msg.value}(_bytecode);\\r\\n        if (_revertOnFailure && !success) {\\r\\n            revert TapiocaWrapper__TOFTExecutionFailed(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deploy a new TOFT contract. Callable only by the owner.\\r\\n    /// @param _erc20 The ERC20 to wrap.\\r\\n    /// @param _bytecode The executable bytecode of the TOFT contract.\\r\\n    /// @param _salt Create2 salt.\\r\\n    function createTOFT(\\r\\n        address _erc20,\\r\\n        bytes calldata _bytecode,\\r\\n        bytes32 _salt,\\r\\n        bool _linked\\r\\n    ) external onlyOwner {\\r\\n        if (address(tapiocaOFTsByErc20[_erc20]) != address(0x0)) {\\r\\n            revert TapiocaWrapper__AlreadyDeployed(_erc20);\\r\\n        }\\r\\n\\r\\n        ITapiocaOFT iOFT = ITapiocaOFT(\\r\\n            _createTOFT(_erc20, _bytecode, _salt, _linked)\\r\\n        );\\r\\n        if (address(iOFT.erc20()) != _erc20) {\\r\\n            revert TapiocaWrapper__FailedDeploy();\\r\\n        }\\r\\n\\r\\n        tapiocaOFTs.push(iOFT);\\r\\n        tapiocaOFTsByErc20[_erc20] = iOFT;\\r\\n\\r\\n        if (iOFT.isHostChain()) {\\r\\n            harvestableTapiocaOFTs.push(iOFT);\\r\\n        }\\r\\n        emit CreateOFT(iOFT, _erc20);\\r\\n    }\\r\\n\\r\\n    // ************************* //\\r\\n    // *** PRIVATE FUNCTIONS *** //\\r\\n    // ************************* //\\r\\n    function _createTOFT(\\r\\n        address _erc20,\\r\\n        bytes calldata _bytecode,\\r\\n        bytes32 _salt,\\r\\n        bool _linked\\r\\n    ) private returns (address) {\\r\\n        address oft;\\r\\n        if (!_linked) {\\r\\n            TapiocaOFT toft = TapiocaOFT(\\r\\n                payable(\\r\\n                    Create2.deploy(\\r\\n                        0,\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                keccak256('TapiocaWrapper'),\\r\\n                                address(this),\\r\\n                                _erc20,\\r\\n                                _salt\\r\\n                            )\\r\\n                        ),\\r\\n                        _bytecode\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n            oft = address(toft);\\r\\n        } else {\\r\\n            mTapiocaOFT toft = mTapiocaOFT(\\r\\n                payable(\\r\\n                    Create2.deploy(\\r\\n                        0,\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                keccak256('TapiocaWrapper'),\\r\\n                                address(this),\\r\\n                                _erc20,\\r\\n                                _salt\\r\\n                            )\\r\\n                        ),\\r\\n                        _bytecode\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n            oft = address(toft);\\r\\n        }\\r\\n        return oft;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaa9a5e325f8628a6f51a972d54cd453587254ec1d355b26bea540eea75e8e3a4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITapiocaOFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface ITapiocaOFT {\\r\\n    function totalFees() external view returns (uint256);\\r\\n\\r\\n    function erc20() external view returns (IERC20);\\r\\n\\r\\n    function hostChainID() external view returns (uint256);\\r\\n\\r\\n    function wrappedAmount(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function wrap(address _toAddress, uint256 _amount) external;\\r\\n\\r\\n    function wrapNative(address _toAddress) external payable;\\r\\n\\r\\n    function harvestFees() external;\\r\\n\\r\\n    function unwrap(address _toAddress, uint256 _amount) external;\\r\\n\\r\\n    function isHostChain() external view returns (bool);\\r\\n\\r\\n    function balanceOf(address _holder) external view returns (uint256);\\r\\n\\r\\n    function isNative() external view returns (bool);\\r\\n\\r\\n    function extractUnderlying(uint256 _amount) external;\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xc3bd27315c0579d8a2c70857a0e4bb3738142a29cd34b7e45f42fa60d0b500dc\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IYieldBox {\\r\\n    function depositAsset(\\r\\n        uint256 assetId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 assetId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n}\\r\\n\",\"keccak256\":\"0xe524828245fa90b75c4e597c6a22e9f8180dd8599a2c791261e5fd61df3771a2\",\"license\":\"UNLICENSED\"},\"contracts/lib/TransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @notice common operations\\r\\nlibrary TransferLib {\\r\\n    /// @notice Author: Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Transfer the ETH and store if it succeeded or not.\\r\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\r\\n        }\\r\\n\\r\\n        require(success, 'ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xff50698d41e872054e28415b8fe692d78ff0aebf46fa520090c3104420b2d234\",\"license\":\"UNLICENSED\"},\"contracts/mTapiocaOFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './TapiocaWrapper.sol';\\r\\nimport './BaseTOFT.sol';\\r\\nimport './lib/TransferLib.sol';\\r\\n\\r\\n//\\r\\n//                 .(%%%%%%%%%%%%*       *\\r\\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\\r\\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\\r\\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\\r\\n//                                #####\\r\\n//                              #####\\r\\n//   #####%#####              *####*  ####%#####*\\r\\n//  (#########(              #####     ##########.\\r\\n//  ##########             #####.      .##########\\r\\n//                       ,####/\\r\\n//                      #####\\r\\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\\r\\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\\r\\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\\r\\n//               (####.\\r\\n//      ,((((  ,####(          /(((((((((((((\\r\\n//        *,  #####  ,(((((((((((((((((((((\\r\\n//          (####   ((((((((((((((((((((/\\r\\n//         ####*  (((((((((((((((((((\\r\\n//                     ,**//*,.\\r\\n\\r\\n//Merged tOFT (eg: arbitrum eth, mainnet eth, optimism eth)\\r\\ncontract mTapiocaOFT is BaseTOFT {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    /// @notice The TapiocaWrapper contract, owner of this contract.\\r\\n    TapiocaWrapper public tapiocaWrapper;\\r\\n    /// @notice allowed chains where you can unwrap your TOFT\\r\\n    mapping(uint256 => bool) public connectedChains;\\r\\n    /// @notice map of approved balancers\\r\\n    /// @dev a balancer can extract the underlying\\r\\n    mapping(address => bool) public balancers;\\r\\n\\r\\n    // ************** //\\r\\n    // *** ERRORS *** //\\r\\n    // ************** //\\r\\n    /// @notice Code executed not on one of the allowed chains\\r\\n    error TOFT_NotAllowedChain();\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n    event ConnectedChainStatusUpdated(uint256 _chain, bool _old, bool _new);\\r\\n    event BalancerStatusUpdated(\\r\\n        address indexed _balancer,\\r\\n        bool _bool,\\r\\n        bool _new\\r\\n    );\\r\\n    event Rebalancing(\\r\\n        address indexed _balancer,\\r\\n        uint256 _amount,\\r\\n        bool _isNative\\r\\n    );\\r\\n\\r\\n    // ******************//\\r\\n    // *** MODIFIERS *** //\\r\\n    // ***************** //\\r\\n\\r\\n    /// @notice Require that the caller is on the host chain of the ERC20.\\r\\n    modifier onlyAllowedChain() {\\r\\n        if (!connectedChains[block.chainid]) {\\r\\n            revert TOFT_NotAllowedChain();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _lzEndpoint,\\r\\n        bool _isNative,\\r\\n        IERC20 _erc20,\\r\\n        IYieldBox _yieldBox,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimal,\\r\\n        uint256 _hostChainID\\r\\n    )\\r\\n        BaseTOFT(\\r\\n            _lzEndpoint,\\r\\n            _isNative,\\r\\n            _erc20,\\r\\n            _yieldBox,\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _decimal,\\r\\n            _hostChainID\\r\\n        )\\r\\n    {\\r\\n        tapiocaWrapper = TapiocaWrapper(msg.sender);\\r\\n\\r\\n        if (block.chainid == _hostChainID) {\\r\\n            connectedChains[_hostChainID] = true;\\r\\n            emit ConnectedChainStatusUpdated(_hostChainID, false, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ********************** //\\r\\n    // *** VIEW FUNCTIONS *** //\\r\\n    // ********************** //\\r\\n    /// @notice Return the output amount of an ERC20 token wrap operation.\\r\\n    function wrappedAmount(uint256 _amount) public view returns (uint256) {\\r\\n        return\\r\\n            _amount -\\r\\n            estimateFees(\\r\\n                tapiocaWrapper.mngmtFee(),\\r\\n                tapiocaWrapper.mngmtFeeFraction(),\\r\\n                _amount\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n    /// @notice Wrap an ERC20 with a 1:1 ratio with a fee if existing.\\r\\n    /// @dev Since it can be executed only on the main chain, if an address exists on the OP chain it will not allowed to wrap.\\r\\n    /// @param _toAddress The address to wrap the ERC20 to.\\r\\n    /// @param _amount The amount of ERC20 to wrap.\\r\\n    function wrap(address _toAddress, uint256 _amount) external onlyHostChain {\\r\\n        _wrap(\\r\\n            _toAddress,\\r\\n            _amount,\\r\\n            tapiocaWrapper.mngmtFee(),\\r\\n            tapiocaWrapper.mngmtFeeFraction()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Wrap a native token with a 1:1 ratio with a fee if existing.\\r\\n    /// @dev Since it can be executed only on the host chain, if an address exists on the linked chain it will not allowed to wrap.\\r\\n    /// @param _toAddress The address to wrap the tokens to.\\r\\n    function wrapNative(address _toAddress) external payable onlyHostChain {\\r\\n        _wrapNative(\\r\\n            _toAddress,\\r\\n            tapiocaWrapper.mngmtFee(),\\r\\n            tapiocaWrapper.mngmtFeeFraction()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Harvest the fees collected by the contract. Called only on host chain.\\r\\n    function harvestFees() external onlyHostChain {\\r\\n        _harvestFees(address(tapiocaWrapper.owner()));\\r\\n    }\\r\\n\\r\\n    /// @notice Unwrap an ERC20/Native with a 1:1 ratio. Called only on host chain.\\r\\n    /// @param _toAddress The address to unwrap the tokens to.\\r\\n    /// @param _amount The amount of tokens to unwrap.\\r\\n    function unwrap(address _toAddress, uint256 _amount)\\r\\n        external\\r\\n        onlyAllowedChain\\r\\n    {\\r\\n        _unwrap(_toAddress, _amount);\\r\\n    }\\r\\n\\r\\n    // *********************** //\\r\\n    // *** OWNER FUNCTIONS *** //\\r\\n    // *********************** //\\r\\n    /// @notice updates a connected chain whitelist status\\r\\n    /// @param _chain the block.chainid of that specific chain\\r\\n    /// @param _status the new whitelist status\\r\\n    function updateConnectedChain(uint256 _chain, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        emit ConnectedChainStatusUpdated(\\r\\n            _chain,\\r\\n            connectedChains[_chain],\\r\\n            _status\\r\\n        );\\r\\n        connectedChains[_chain] = _status;\\r\\n    }\\r\\n\\r\\n    /// @notice updates a Balancer whitelist status\\r\\n    /// @param _balancer the operator address\\r\\n    /// @param _status the new whitelist status\\r\\n    function updateBalancerState(address _balancer, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        emit BalancerStatusUpdated(_balancer, balancers[_balancer], _status);\\r\\n        balancers[_balancer] = _status;\\r\\n    }\\r\\n\\r\\n    /// @notice extracts the underlying token/native for rebalancing\\r\\n    /// @param _amount the amount used for rebalancing\\r\\n    function extractUnderlying(uint256 _amount) external {\\r\\n        require(balancers[msg.sender], 'TapiocaOFT: not authorized');\\r\\n        \\r\\n        if (isNative) {\\r\\n            TransferLib.safeTransferETH(msg.sender, _amount);\\r\\n        } else {\\r\\n            erc20.safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        emit Rebalancing(msg.sender, _amount, isNative);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x86b86b33f8b9e1ba377942b4c7870792620eccc355ae7d13ae2a7518df787ed5\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/libraries/LzLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LzLib {\\n    // LayerZero communication\\n    struct CallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n\\n    struct AirdropParams {\\n        uint airdropAmount;\\n        bytes32 airdropAddress;\\n    }\\n\\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\\n        } else {\\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\\n        }\\n    }\\n\\n    // Build Adapter Params\\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\\n        // txType 1\\n        // bytes  [2       32      ]\\n        // fields [txType  extraGas]\\n        return abi.encodePacked(uint16(1), _uaGas);\\n    }\\n\\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\\n        require(_params.airdropAmount > 0, \\\"Airdrop amount must be greater than 0\\\");\\n        require(_params.airdropAddress != bytes32(0x0), \\\"Airdrop address must be set\\\");\\n\\n        // txType 2\\n        // bytes  [2       32        32            bytes[]         ]\\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\\n    }\\n\\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    // Decode Adapter Params\\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            txType := mload(add(_adapterParams, 2))\\n            uaGas := mload(add(_adapterParams, 34))\\n        }\\n        require(txType == 1 || txType == 2, \\\"Unsupported txType\\\");\\n        require(uaGas > 0, \\\"Gas too low\\\");\\n\\n        if (txType == 2) {\\n            assembly {\\n                airdropAmount := mload(add(_adapterParams, 66))\\n                airdropAddress := mload(add(_adapterParams, 86))\\n            }\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\\n        return address(uint160(uint(_bytes32Address)));\\n    }\\n\\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n}\\n\",\"keccak256\":\"0xd7ed18db258ec3a628b0c5544eb14704180bfaed848014533ac90c2bd78d52aa\",\"license\":\"BUSL-1.1\"},\"tapioca-sdk/dist/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf7a97c79e0670912e51cfe74a06bf049718640ac764706250a903a63fec6e0b6\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2afd4980a5850f45f2c4d7ec44d77b292a51b80f847566479548f89572065311\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/BaseOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OFTCoreV2.sol\\\";\\nimport \\\"./IOFTV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\\n\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\\n        _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    /************************************************************************\\n    * public view functions\\n    ************************************************************************/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint);\\n\\n    function token() public view virtual override returns (address);\\n}\\n\",\"keccak256\":\"0xbf09a6b713f3553a46d19047d172c6524d5615625d1c8fb019fa741c806d52b3\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d034ba786436c1fce8057352c87373098bd1d8026b24c8fbc7be28636d0c15d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xf57e437ced3bc10bb333123bb49475dab47c7615b86401c4d872c29ad4928fd5\",\"license\":\"BUSL-1.1\"},\"tapioca-sdk/dist/contracts/token/oft/v2/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0xb1d31f341715347d49db4e2c0de27c49bbd70b5b3d9b0adb1050b2b3a305ab87\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/OFTCoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../../../util/ExcessivelySafeCall.sol\\\";\\nimport \\\"./ICommonOFT.sol\\\";\\nimport \\\"./IOFTReceiverV2.sol\\\";\\n\\nabstract contract OFTCoreV2 is NonblockingLzApp {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint8 public constant PT_SEND = 0;\\n    uint8 public constant PT_SEND_AND_CALL = 1;\\n\\n    uint8 public immutable sharedDecimals;\\n\\n    bool public useCustomAdapterParams;\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event NonContractAddress(address _address);\\n\\n    // _sharedDecimals should be the minimum decimals on all chains\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        sharedDecimals = _sharedDecimals;\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\\n        require(_msgSender() == address(this), \\\"OFTCore: caller must be OFTCore\\\");\\n\\n        // send\\n        _amount = _transferFrom(address(this), _to, _amount);\\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\\n\\n        // call\\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendAndCall()\\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint8 packetType = _payload.toUint8(0);\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else if (packetType == PT_SEND_AND_CALL) {\\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\\n        if (to == address(0)) {\\n            to = address(0xdead);\\n        }\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        // encode the msg.sender into the payload instead of _from\\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\\n\\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\\n        uint amount = _sd2ld(amountSD);\\n\\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\\n        if (!credited) {\\n            amount = _creditTo(_srcChainId, address(this), amount);\\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\\n        }\\n\\n        if (!_isContract(to)) {\\n            emit NonContractAddress(to);\\n            return;\\n        }\\n\\n        // workaround for stack too deep\\n        uint16 srcChainId = _srcChainId;\\n        bytes memory srcAddress = _srcAddress;\\n        uint64 nonce = _nonce;\\n        bytes memory payload = _payload;\\n        bytes32 from_ = from;\\n        address to_ = to;\\n        uint amount_ = amount;\\n        bytes memory payloadForCall_ = payloadForCall;\\n\\n        // no gas limit for the call if retry\\n        uint gas = credited ? gasleft() : gasForCall;\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas));\\n\\n        if (success) {\\n            bytes32 hash = keccak256(payload);\\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\\n        } else {\\n            // store the failed message into the nonblockingLzApp\\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\\n        }\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _ld2sd(uint _amount) internal virtual view returns (uint64) {\\n        uint amountSD = _amount / _ld2sdRate();\\n        require(amountSD <= type(uint64).max, \\\"OFTCore: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _sd2ld(uint64 _amountSD) internal virtual view returns (uint) {\\n        return _amountSD * _ld2sdRate();\\n    }\\n\\n    function _removeDust(uint _amount) internal virtual view returns (uint amountAfter, uint dust) {\\n        dust = _amount % _ld2sdRate();\\n        amountAfter = _amount - dust;\\n    }\\n\\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\\n    }\\n\\n    function _decodeSendPayload(bytes memory _payload) internal virtual view returns (address to, uint64 amountSD) {\\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n    }\\n\\n    function _encodeSendAndCallPayload(address _from, bytes32 _toAddress, uint64 _amountSD, bytes memory _payload, uint64 _dstGasForCall) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(\\n            PT_SEND_AND_CALL,\\n            _toAddress,\\n            _amountSD,\\n            _addressToBytes32(_from),\\n            _dstGasForCall,\\n            _payload\\n        );\\n    }\\n\\n    function _decodeSendAndCallPayload(bytes memory _payload) internal virtual view returns (bytes32 from, address to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n        from = _payload.toBytes32(41);\\n        dstGasForCall = _payload.toUint64(73);\\n        payload = _payload.slice(81, _payload.length - 81);\\n    }\\n\\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\\n\\n    function _ld2sdRate() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x89fa0c1355ae4173bac750ffde5e5a4e53723f4d1d0738fcac3e0780cc54f57d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/OFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BaseOFTV2.sol\\\";\\n\\ncontract OFTV2 is BaseOFTV2, ERC20 {\\n\\n    uint internal immutable ld2sdRate;\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _sharedDecimals, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\\n        uint8 decimals = decimals();\\n        require(_sharedDecimals <= decimals, \\\"OFT: sharedDecimals must be <= decimals\\\");\\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        // if transfer from this contract, no need to check allowance\\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\\n        _transfer(_from, _to, _amount);\\n        return _amount;\\n    }\\n\\n    function _ld2sdRate() internal view virtual override returns (uint) {\\n        return ld2sdRate;\\n    }\\n}\\n\",\"keccak256\":\"0x0232fca007068612a9d212de6245701b9f343647b76cd00baea62695f4f7216c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"tapioca-sdk/dist/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620061eb380380620061eb8339810160408190526200003491620003d1565b8787878787878787836040516020016200004f9190620004ac565b60405160208183030381529060405283604051602001620000719190620004e1565b60408051601f198184030181529190526200008e60028562000526565b8a8383838381818080620000a2336200024a565b6001600160a01b0316608052505060ff1660a05250600b9050620000c78382620005e6565b50600c620000d68282620005e6565b5050506000620000eb6200029a60201b60201c565b90508060ff168360ff161115620001595760405162461bcd60e51b815260206004820152602760248201527f4f46543a20736861726564446563696d616c73206d757374206265203c3d20646044820152666563696d616c7360c81b60648201526084015b60405180910390fd5b620001658382620006b2565b6200017290600a620007d7565b60c052505089159250620001ce915050576001600160a01b03861615620001ce5760405162461bcd60e51b815260206004820152600f60248201526e544f46545f5f4e6f744e617469766560881b604482015260640162000150565b600f80546001600160a01b039788166001600160a01b03199182161790915560118054601093909355600d805497909816981515600160a01b029091166001600160a81b0319968716179790971790955533610100029390941660ff909416939093179190911790925550620007ef9950505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60115460009060ff168103620002b05750601290565b5060115460ff1690565b6001600160a01b0381168114620002d057600080fd5b50565b8051620002e081620002ba565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000318578181015183820152602001620002fe565b8381111562000328576000848401525b50505050565b600082601f8301126200034057600080fd5b81516001600160401b03808211156200035d576200035d620002e5565b604051601f8301601f19908116603f01168101908282118183101715620003885762000388620002e5565b81604052838152866020858801011115620003a257600080fd5b620003b5846020830160208901620002fb565b9695505050505050565b805160ff81168114620002e057600080fd5b600080600080600080600080610100898b031215620003ef57600080fd5b8851620003fc81620002ba565b60208a015190985080151581146200041357600080fd5b96506200042360408a01620002d3565b95506200043360608a01620002d3565b60808a01519095506001600160401b03808211156200045157600080fd5b6200045f8c838d016200032e565b955060a08b01519150808211156200047657600080fd5b50620004858b828c016200032e565b9350506200049660c08a01620003bf565b915060e089015190509295985092959890939650565b6a546170696f63614f46542d60a81b815260008251620004d481600b850160208701620002fb565b91909101600b0192915050565b64544f46542d60d81b81526000825162000503816005850160208701620002fb565b9190910160050192915050565b634e487b7160e01b600052601160045260246000fd5b600060ff8316806200054857634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b600181811c908216806200056c57607f821691505b6020821081036200058d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005e157600081815260208120601f850160051c81016020861015620005bc5750805b601f850160051c820191505b81811015620005dd57828155600101620005c8565b5050505b505050565b81516001600160401b03811115620006025762000602620002e5565b6200061a8162000613845462000557565b8462000593565b602080601f831160018114620006525760008415620006395750858301515b600019600386901b1c1916600185901b178555620005dd565b600085815260208120601f198616915b82811015620006835788860151825594840194600190910190840162000662565b5085821015620006a25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060ff821660ff841680821015620006cf57620006cf62000510565b90039392505050565b600181815b8085111562000719578160001904821115620006fd57620006fd62000510565b808516156200070b57918102915b93841c9390800290620006dd565b509250929050565b6000826200073257506001620007d1565b816200074157506000620007d1565b81600181146200075a5760028114620007655762000785565b6001915050620007d1565b60ff84111562000779576200077962000510565b50506001821b620007d1565b5060208310610133831016604e8410600b8410161715620007aa575081810a620007d1565b620007b68383620006d8565b8060001904821115620007cd57620007cd62000510565b0290505b92915050565b6000620007e860ff84168362000721565b9392505050565b60805160a05160c051615978620008736000396000613f4201526000610861015260008181610a5f01528181610c9901528181610fb1015281816110710152818161145b0152818161161f01528181611bdd01528181611f710152818161252601528181612b1b0152818161300a015281816131c101526138d001526159786000f3fe6080604052600436106103925760003560e01c806376203b48116101de578063bd92ab6b11610103578063df2a5b3b1161009b578063df2a5b3b14610b94578063e6a20ae614610bb4578063eab45d9c14610bc9578063eaffd49a14610be9578063eb8d72b714610c09578063ed629c5c14610c29578063f2fde38b14610c43578063f5ecbdbc14610c63578063fc0c546a14610c8357600080fd5b8063bd92ab6b14610aa1578063bf376c7a14610ab4578063c446183414610ad4578063c77c297214610aea578063c968ae0a14610b01578063cbed8b9c14610b21578063d1deba1f14610b41578063dd62ed3e14610b54578063de40657714610b7457600080fd5b80639f38369a116101765780639f38369a14610975578063a457c2d714610995578063a4c51df5146109b5578063a6c3d165146109d5578063a9059cbb146109f5578063ae9db24314610a15578063b0f67a3514610a28578063b353aaa714610a4d578063baf3292d14610a8157600080fd5b806376203b481461080f578063785e9e8614610822578063857749b01461084f5780638cfd8f5c146108835780638da5cb5b146108bb5780639358928b146108d9578063950c8a74146108ee57806395d89b411461090e5780639bdb98121461092357600080fd5b8063365260b4116102c45780635bfeaa051161025c5780635bfeaa051461070f57806366ad5c8a14610725578063695ef6bf146107455780636ef7980b1461075857806370a082311461076e578063715018a6146107a457806373cfc6b2146107b957806374fd4b98146107da5780637533d788146107ef57600080fd5b8063365260b4146105b457806339509351146105e957806339f47693146106095780633d8b38f6146106295780633f1f4fa41461064957806342d65a8d1461067657806344770515146106965780634c42899a146106ab5780635b8c41e6146106c057600080fd5b806310ddb1371161033757806310ddb137146104c4578063121dbc7c146104e457806313114a9d146104fa578063138cc18f1461051057806318160ddd1461052557806323b872dd1461053a5780632479d8631461055a578063313ce5671461056d578063317dbba81461059457600080fd5b80621d35671461039e57806254af3a146103c057806301ffc9a7146103e9578063069fd8491461041957806306fdde031461044257806307e0db1714610464578063095ea7b3146104845780630df37483146104a457600080fd5b3661039957005b600080fd5b3480156103aa57600080fd5b506103be6103b9366004614699565b610c96565b005b3480156103cc57600080fd5b506103d660105481565b6040519081526020015b60405180910390f35b3480156103f557600080fd5b5061040961040436600461472e565b610ec7565b60405190151581526020016103e0565b34801561042557600080fd5b5061042f61030381565b60405161ffff90911681526020016103e0565b34801561044e57600080fd5b50610457610efe565b6040516103e091906147b0565b34801561047057600080fd5b506103be61047f3660046147c3565b610f90565b34801561049057600080fd5b5061040961049f3660046147f5565b611019565b3480156104b057600080fd5b506103be6104bf366004614821565b611031565b3480156104d057600080fd5b506103be6104df3660046147c3565b611050565b3480156104f057600080fd5b5061042f61030481565b34801561050657600080fd5b506103d6600e5481565b34801561051c57600080fd5b506103be6110a8565b34801561053157600080fd5b50600a546103d6565b34801561054657600080fd5b5061040961055536600461483f565b61114b565b6103be610568366004614880565b61116f565b34801561057957600080fd5b5061058261128b565b60405160ff90911681526020016103e0565b3480156105a057600080fd5b506103d66105af36600461489d565b6112aa565b3480156105c057600080fd5b506105d46105cf3660046148d7565b6112c9565b604080519283526020830191909152016103e0565b3480156105f557600080fd5b506104096106043660046147f5565b61131e565b34801561061557600080fd5b506103be6106243660046147f5565b611340565b34801561063557600080fd5b50610409610644366004614940565b611370565b34801561065557600080fd5b506103d66106643660046147c3565b60036020526000908152604090205481565b34801561068257600080fd5b506103be610691366004614940565b61143c565b3480156106a257600080fd5b506103d6600081565b3480156106b757600080fd5b50610582600081565b3480156106cc57600080fd5b506103d66106db366004614a57565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561071b57600080fd5b5061042f61030581565b34801561073157600080fd5b506103be610740366004614699565b6114c2565b6103be610753366004614ace565b61159e565b34801561076457600080fd5b5061042f61030281565b34801561077a57600080fd5b506103d6610789366004614880565b6001600160a01b031660009081526008602052604090205490565b3480156107b057600080fd5b506103be611609565b3480156107c557600080fd5b50600d5461040990600160a01b900460ff1681565b3480156107e657600080fd5b5061042f61161b565b3480156107fb57600080fd5b5061045761080a3660046147c3565b6116a4565b6103be61081d366004614b43565b61173e565b34801561082e57600080fd5b50600f54610842906001600160a01b031681565b6040516103e09190614bf7565b34801561085b57600080fd5b506105827f000000000000000000000000000000000000000000000000000000000000000081565b34801561088f57600080fd5b506103d661089e366004614c0b565b600260209081526000928352604080842090915290825290205481565b3480156108c757600080fd5b506000546001600160a01b0316610842565b3480156108e557600080fd5b506103d66117ed565b3480156108fa57600080fd5b50600454610842906001600160a01b031681565b34801561091a57600080fd5b506104576117f8565b34801561092f57600080fd5b5061040961093e366004614a57565b6007602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205460ff1681565b34801561098157600080fd5b506104576109903660046147c3565b611807565b3480156109a157600080fd5b506104096109b03660046147f5565b61191d565b3480156109c157600080fd5b506105d46109d0366004614c44565b611998565b3480156109e157600080fd5b506103be6109f0366004614940565b611a27565b348015610a0157600080fd5b50610409610a103660046147f5565b611ab0565b6103be610a23366004614d03565b611abe565b348015610a3457600080fd5b506011546108429061010090046001600160a01b031681565b348015610a5957600080fd5b506108427f000000000000000000000000000000000000000000000000000000000000000081565b348015610a8d57600080fd5b506103be610a9c366004614880565b611b74565b6103be610aaf366004614d8b565b611bd2565b348015610ac057600080fd5b506103be610acf3660046147f5565b611d35565b348015610ae057600080fd5b506103d661271081565b348015610af657600080fd5b506010544614610409565b348015610b0d57600080fd5b506103d6610b1c366004614de4565b611e4f565b348015610b2d57600080fd5b506103be610b3c366004614dfd565b611f52565b6103be610b4f366004614699565b611fdc565b348015610b6057600080fd5b506103d6610b6f366004614e6f565b6121f2565b348015610b8057600080fd5b50600d54610842906001600160a01b031681565b348015610ba057600080fd5b506103be610baf366004614e9d565b61221d565b348015610bc057600080fd5b50610582600181565b348015610bd557600080fd5b506103be610be4366004614ecd565b6122cf565b348015610bf557600080fd5b506103be610c04366004614eea565b612318565b348015610c1557600080fd5b506103be610c24366004614940565b612425565b348015610c3557600080fd5b506006546104099060ff1681565b348015610c4f57600080fd5b506103be610c5e366004614880565b61247f565b348015610c6f57600080fd5b50610457610c7e366004614fb4565b6124f5565b348015610c8f57600080fd5b5030610842565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d135760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526001602052604081208054610d3190615005565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5d90615005565b8015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b50505050509050805186869050148015610dc5575060008151115b8015610ded575080516020820120604051610de39088908890615039565b6040518091039020145b610e485760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610d0a565b610ebe8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506125a692505050565b50505050505050565b60006001600160e01b03198216631f7ecdf760e01b1480610ef857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600b8054610f0d90615005565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3990615005565b8015610f865780601f10610f5b57610100808354040283529160200191610f86565b820191906000526020600020905b815481529060010190602001808311610f6957829003601f168201915b5050505050905090565b610f9861261f565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b5050505050565b600033611027818585612679565b5060019392505050565b61103961261f565b61ffff909116600090815260036020526040902055565b61105861261f565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610fe4565b60105446146110ca576040516358eebedd60e11b815260040160405180910390fd5b611149601160019054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190615049565b61279d565b565b6000336111598582856127f1565b61116485858561286b565b506001949350505050565b6010544614611191576040516358eebedd60e11b815260040160405180910390fd5b61128881601160019054906101000a90046001600160a01b03166001600160a01b031663a52dbfef6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c9190615066565b601160019054906101000a90046001600160a01b03166001600160a01b0316632c5b4e4d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561125f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112839190615066565b612a04565b50565b60115460009060ff1681036112a05750601290565b5060115460ff1690565b6000826112b78584615095565b6112c191906150ca565b949350505050565b60008061130f8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ab392505050565b91509150965096945050505050565b60003361102781858561133183836121f2565b61133b91906150de565b612679565b6010544614611362576040516358eebedd60e11b815260040160405180910390fd5b61136c8282612ba7565b5050565b61ffff83166000908152600160205260408120805482919061139190615005565b80601f01602080910402602001604051908101604052809291908181526020018280546113bd90615005565b801561140a5780601f106113df5761010080835404028352916020019161140a565b820191906000526020600020905b8154815290600101906020018083116113ed57829003601f168201915b505050505090508383604051611421929190615039565b60405180910390208180519060200120149150509392505050565b61144461261f565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906114949086908690869060040161511f565b600060405180830381600087803b1580156114ae57600080fd5b505af1158015610ebe573d6000803e3d6000fd5b3330146115205760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610d0a565b6115968686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612c2d92505050565b505050505050565b611596858585856115b26020870187614880565b6115c26040880160208901614880565b6115cf604089018961513d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d1892505050565b61161161261f565b6111496000612dc2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f9190615183565b905090565b600160205260009081526040902080546116bd90615005565b80601f01602080910402602001604051908101604052809291908181526020018280546116e990615005565b80156117365780601f1061170b57610100808354040283529160200191611736565b820191906000526020600020905b81548152906001019060200180831161171957829003601f168201915b505050505081565b6117e28888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061178b9150506020890189614880565b61179b60408a0160208b01614880565b6117a860408b018b61513d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e1292505050565b505050505050505050565b600061169f600a5490565b6060600c8054610f0d90615005565b61ffff811660009081526001602052604081208054606092919061182a90615005565b80601f016020809104026020016040519081016040528092919081815260200182805461185690615005565b80156118a35780601f10611878576101008083540402835291602001916118a3565b820191906000526020600020905b81548152906001019060200180831161188657829003601f168201915b5050505050905080516000036118fb5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610d0a565b61191660006014835161190e91906151a0565b839190612ed0565b9392505050565b6000338161192b82866121f2565b90508381101561198b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d0a565b6111648286868403612679565b600080611a158b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b81528e93508d9250908c908c9081908401838280828437600092019190915250612fdd92505050565b91509150995099975050505050505050565b611a2f61261f565b818130604051602001611a44939291906151b7565b60408051601f1981840301815291815261ffff8516600090815260016020522090611a6f9082615238565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611aa39392919061511f565b60405180910390a1505050565b60003361102781858561286b565b33600082611ace57610305611ad2565b6103035b336040805161ffff90931660208401528201526060810183905260808101899052600060a082015260c081018890526001600160a01b03861660e0820152610100016040516020818303038152906040529050611b33868233888834613098565b81336001600160a01b03168761ffff166000805160206158e38339815191528b604051611b6291815260200190565b60405180910390a45050505050505050565b611b7c61261f565b600480546001600160a01b0319166001600160a01b0383161790556040517f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90611bc7908390614bf7565b60405180910390a150565b6000339050611c64337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d9190615183565b838a61323d565b50600082611c7457610304611c78565b6103025b336040805161ffff9093166020840152820152606081018390526080810189905260a0810188905260c00160405160208183030381529060405290506000611ce38660408051600160f01b602082015260228082019390935281518082039093018352604201905290565b9050611cf3878333888534613098565b82336001600160a01b03168861ffff166000805160206158e38339815191528c604051611d2291815260200190565b60405180910390a4505050505050505050565b6010544614611d57576040516358eebedd60e11b815260040160405180910390fd5b61136c8282601160019054906101000a90046001600160a01b03166001600160a01b031663a52dbfef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd39190615066565b601160019054906101000a90046001600160a01b03166001600160a01b0316632c5b4e4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4a9190615066565b61326f565b6000611f48601160019054906101000a90046001600160a01b03166001600160a01b031663a52dbfef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb9190615066565b601160019054906101000a90046001600160a01b03166001600160a01b0316632c5b4e4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f429190615066565b846112aa565b610ef890836151a0565b611f5a61261f565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611fae90889088908890889088906004016152f1565b600060405180830381600087803b158015611fc857600080fd5b505af11580156117e2573d6000803e3d6000fd5b61ffff86166000908152600560205260408082209051611fff9088908890615039565b90815260408051602092819003830190206001600160401b0387166000908152925290205490508061207f5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610d0a565b808383604051612090929190615039565b6040518091039020146120ef5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610d0a565b61ffff871660009081526005602052604080822090516121129089908990615039565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f880182900482028301820190528682526121aa918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612c2d92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516121e195949392919061531f565b60405180910390a150505050505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b61222561261f565b6000811161226d5760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b6044820152606401610d0a565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611aa3565b6122d761261f565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001611bc7565b3330146123675760405162461bcd60e51b815260206004820152601f60248201527f4f4654436f72653a2063616c6c6572206d757374206265204f4654436f7265006044820152606401610d0a565b612372308686613324565b9350846001600160a01b03168a61ffff16600080516020615903833981519152866040516123a291815260200190565b60405180910390a3604051633fe79aed60e11b81526001600160a01b03861690637fcf35da9083906123e6908e908e908e908e908e908d908d908d9060040161535a565b600060405180830381600088803b15801561240057600080fd5b5087f1158015612414573d6000803e3d6000fd5b505050505050505050505050505050565b61242d61261f565b61ffff8316600090815260016020526040902061244b8284836153b5565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611aa39392919061511f565b61248761261f565b6001600160a01b0381166124ec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d0a565b61128881612dc2565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015612575573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261259d919081019061546e565b95945050505050565b6000806126095a60966366ad5c8a60e01b898989896040516024016125ce94939291906154db565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190613376565b9150915081611596576115968686868685613400565b6000546001600160a01b031633146111495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d0a565b6001600160a01b0383166126db5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d0a565b6001600160a01b03821661273c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d0a565b6001600160a01b0383811660008181526009602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600e54600f546127ba916001600160a01b0390911690839061349d565b6000600e8190556040519081527f790367a28f0e0ab0688b2b971a0d35c72b0fc7d750e2f574dd42b746eb67c0f190602001611bc7565b60006127fd84846121f2565b9050600019811461286557818110156128585760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d0a565b6128658484848403612679565b50505050565b6001600160a01b0383166128cf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d0a565b6001600160a01b0382166129315760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d0a565b6001600160a01b038316600090815260086020526040902054818110156129a95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d0a565b6001600160a01b038085166000818152600860205260408082208686039055928616808252908390208054860190559151600080516020615923833981519152906129f79086815260200190565b60405180910390a3612865565b34600003612a2557604051630db5837760e11b815260040160405180910390fd5b60008215612a62576000612a3a8484346112aa565b905080600e6000828254612a4e91906150de565b90915550612a5e905081346151a0565b9150505b612a6c8482613505565b6040518181526001600160a01b0385169033907f32771713d1bc9f76444ca8b47f67bb9a592b559397cf27cfea344efa0fdb7d8b906020015b60405180910390a350505050565b6000806000612b0187612ac5886135b4565b6040805160006020820152602181019390935260c09190911b6001600160c01b0319166041830152805160298184030181526049909201905290565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090612b58908b90309086908b908b90600401615519565b6040805180830381865afa158015612b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b98919061556d565b92509250509550959350505050565b612bb13382613622565b600d54600160a01b900460ff1615612bd257612bcd8282613744565b612be9565b600f54612be9906001600160a01b0316838361349d565b6040518181526001600160a01b0383169033907fbe8e6aacbb5d99c99f1992d91d807f570d0acacabee02374369ed42710dc66989060200160405180910390a35050565b6000612c398282613795565b9050610301198101612c5757612c5285833060016137f3565b611012565b610302198101612c6d57612c528583600161387e565b610303198101612c8457612c5285833060006137f3565b610304198101612c9a57612c528583600061387e565b612ca58260006139ff565b60ff16905080612cbb57612c5285858585613a5b565b6000198101612cd057612c5285858585613ad9565b60405162461bcd60e51b815260206004820152601e60248201527f4f4654436f726556323a20756e6b6e6f776e207061636b6574207479706500006044820152606401610d0a565b6000612d2687828481613ce2565b612d2f85613d5c565b509050612d3e8888888461323d565b905060008111612d605760405162461bcd60e51b8152600401610d0a90615591565b6000612d6f87612ac5846135b4565b9050612d7f888287878734613098565b86896001600160a01b03168961ffff166000805160206158e383398151915285604051612dae91815260200190565b60405180910390a450979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000612e2a896001846001600160401b038916613ce2565b612e3387613d5c565b509050612e428a8a8a8461323d565b905060008111612e645760405162461bcd60e51b8152600401610d0a90615591565b6000612e7b338a612e74856135b4565b8a8a613d84565b9050612e8b8a8287878734613098565b888b6001600160a01b03168b61ffff166000805160206158e383398151915285604051612eba91815260200190565b60405180910390a4509998505050505050505050565b606081612ede81601f6150de565b1015612f1d5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610d0a565b612f2782846150de565b84511015612f6b5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610d0a565b606082158015612f8a5760405191506000825260208201604052612fd4565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612fc3578051835260209283019201612fab565b5050858452601f01601f1916604052505b50949350505050565b6000806000612ff0338a612e748b6135b4565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090613047908d90309086908b908b90600401615519565b6040805180830381865afa158015613063573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613087919061556d565b925092505097509795505050505050565b61ffff8616600090815260016020526040812080546130b690615005565b80601f01602080910402602001604051908101604052809291908181526020018280546130e290615005565b801561312f5780601f106131045761010080835404028352916020019161312f565b820191906000526020600020905b81548152906001019060200180831161311257829003601f168201915b5050505050905080516000036131a05760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610d0a565b6131ab878751613dc5565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490613202908b9086908c908c908c908c906004016155c4565b6000604051808303818588803b15801561321b57600080fd5b505af115801561322f573d6000803e3d6000fd5b505050505050505050505050565b6000336001600160a01b038616811461325b5761325b8682856127f1565b6132658684613622565b5090949350505050565b81156132c55760006132828383866112aa565b905080600e600082825461329691906150de565b909155506132bf905033306132ab84886150de565b600f546001600160a01b0316929190613e36565b506132dd565b600f546132dd906001600160a01b0316333086613e36565b6132e78484613505565b6040518381526001600160a01b0385169033907f32771713d1bc9f76444ca8b47f67bb9a592b559397cf27cfea344efa0fdb7d8b90602001612aa5565b600033306001600160a01b038616148015906133525750806001600160a01b0316856001600160a01b031614155b15613362576133628582856127f1565b61336d85858561286b565b50909392505050565b6000606060008060008661ffff166001600160401b0381111561339b5761339b614994565b6040519080825280601f01601f1916602001820160405280156133c5576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156133e7578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051613431919061562b565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c9061348e9087908790879087908790615647565b60405180910390a15050505050565b6040516001600160a01b03831660248201526044810182905261350090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613e6e565b505050565b6001600160a01b03821661355b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d0a565b80600a600082825461356d91906150de565b90915550506001600160a01b038216600081815260086020908152604080832080548601905551848152600080516020615923833981519152910160405180910390a35050565b6000806135bf613f40565b6135c990846150ca565b90506001600160401b03811115610ef85760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f770000000000006044820152606401610d0a565b6001600160a01b0382166136825760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d0a565b6001600160a01b038216600090815260086020526040902054818110156136f65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d0a565b6001600160a01b03831660008181526008602090815260408083208686039055600a8054879003905551858152919291600080516020615923833981519152910160405180910390a3505050565b600080600080600085875af19050806135005760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b6044820152606401610d0a565b60006137a28260206150de565b835110156137ea5760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610d0a565b50016020015190565b60008060008580602001905181019061380c9190615699565b94509450509350506000846138215783613823565b305b9050613830883085613f64565b5061383e8284883085613f77565b806001600160a01b03168861ffff166000805160206159038339815191528560405161386c91815260200190565b60405180910390a35050505050505050565b60008060008060008680602001905181019061389a91906156e2565b96509650965096505095505060006138af8690565b90506138ca8386868a6138c257846138c4565b305b3061409c565b613957307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561392c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139509190615183565b308861323d565b50600061396787612ac5886135b4565b90506139868a8230866040518060200160405280600081525047613098565b30826001600160a01b03168b61ffff166000805160206158e3833981519152896040516139b591815260200190565b60405180910390a4816001600160a01b03168a61ffff16600080516020615903833981519152886040516139eb91815260200190565b60405180910390a350505050505050505050565b6000613a0c8260016150de565b83511015613a525760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610d0a565b50016001015190565b600080613a6783614148565b90925090506001600160a01b038216613a805761dead91505b6000613a8b826141a2565b9050613a98878483613f64565b9050826001600160a01b03168761ffff1660008051602061590383398151915283604051613ac891815260200190565b60405180910390a350505050505050565b6000806000806000613aea866141bf565b945094509450945094506000600760008b61ffff1661ffff16815260200190815260200160002089604051613b1f919061562b565b90815260408051602092819003830190206001600160401b038b166000908152925281205460ff169150613b52856141a2565b905081613bc057613b648b3083613f64565b61ffff8c16600090815260076020526040908190209051919250600191613b8c908d9061562b565b90815260408051602092819003830190206001600160401b038d16600090815292529020805460ff19169115159190911790555b6001600160a01b0386163b613c12577f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d86604051613bfe9190614bf7565b60405180910390a150505050505050612865565b8a8a8a8a8a8a868a60008a613c30578b6001600160401b0316613c32565b5a5b9050600080613c645a609663eaffd49a60e01b8e8e8e8d8d8d8d8d6040516024016125ce98979695949392919061574d565b915091508115613cbd578751602089012060405161ffff8d16907fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd88490613caf908e908e9086906157c1565b60405180910390a250613cca565b613cca8b8b8b8b85613400565b50505050505050505050505050505050505050505050565b60065460ff1615613cfe57613cf98484848461424b565b612865565b8151156128655760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b6064820152608401610d0a565b600080613d67613f40565b613d7190846157ef565b9050613d7d81846151a0565b9150915091565b6060600185856001600160a01b0389168587604051602001613dab96959493929190615803565b604051602081830303815290604052905095945050505050565b61ffff821660009081526003602052604081205490819003613de657506127105b808211156135005760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610d0a565b6040516001600160a01b03808516602483015283166044820152606481018290526128659085906323b872dd60e01b906084016134c9565b6000613ec3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661432a9092919063ffffffff16565b8051909150156135005780806020019051810190613ee19190615864565b6135005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d0a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000613f708383613505565b5092915050565b600d5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529084169063095ea7b3906044016020604051808303816000875af1158015613fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fee9190615864565b50600d54604051634d4d7cbd60e11b81526001600160a01b0390911690639a9af97a90614028908890869086908a90600090600401615881565b60408051808303816000875af1158015614046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406a919061556d565b50506040518481527fcd253788682cc9dd5efb9d890404e8dd9a7baac51389803c78889ac77e526c989060200161348e565b600d546040516311a5cc7760e31b81526001600160a01b0390911690638d2e63b8906140d4908890869086908a908a90600401615881565b60408051808303816000875af11580156140f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614116919061556d565b50506040518481527fe3f504c463a59f99e9ef10d056640f76473a05d4c5756532a68079c48949e7ea9060200161348e565b6000808061415684826139ff565b60ff16148015614167575082516029145b6141835760405162461bcd60e51b8152600401610d0a906158b0565b61418e83600d614339565b915061419b83602161439e565b9050915091565b60006141ac613f40565b610ef8906001600160401b038416615095565b6000808060608160016141d287836139ff565b60ff16146141f25760405162461bcd60e51b8152600401610d0a906158b0565b6141fd86600d614339565b935061420a86602161439e565b92506142178660296143fb565b945061422486604961439e565b9050614240605180885161423891906151a0565b889190612ed0565b915091939590929450565b600061425683614450565b61ffff8087166000908152600260209081526040808320938916835292905290812054919250906142889084906150de565b9050600081116142da5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610d0a565b808210156115965760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610d0a565b60606112c184846000856144ac565b60006143468260146150de565b8351101561438e5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610d0a565b500160200151600160601b900490565b60006143ab8260086150de565b835110156143f25760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610d0a565b50016008015190565b60006144088260206150de565b835110156137ea5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610d0a565b60006022825110156144a45760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610d0a565b506022015190565b60608247101561450d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d0a565b600080866001600160a01b03168587604051614529919061562b565b60006040518083038185875af1925050503d8060008114614566576040519150601f19603f3d011682016040523d82523d6000602084013e61456b565b606091505b509150915061457c87838387614587565b979650505050505050565b606083156145f65782516000036145ef576001600160a01b0385163b6145ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d0a565b50816112c1565b6112c1838381511561460b5781518083602001fd5b8060405162461bcd60e51b8152600401610d0a91906147b0565b61ffff8116811461128857600080fd5b60008083601f84011261464757600080fd5b5081356001600160401b0381111561465e57600080fd5b60208301915083602082850101111561467657600080fd5b9250929050565b80356001600160401b038116811461469457600080fd5b919050565b600080600080600080608087890312156146b257600080fd5b86356146bd81614625565b955060208701356001600160401b03808211156146d957600080fd5b6146e58a838b01614635565b90975095508591506146f960408a0161467d565b9450606089013591508082111561470f57600080fd5b5061471c89828a01614635565b979a9699509497509295939492505050565b60006020828403121561474057600080fd5b81356001600160e01b03198116811461191657600080fd5b60005b8381101561477357818101518382015260200161475b565b838111156128655750506000910152565b6000815180845261479c816020860160208601614758565b601f01601f19169290920160200192915050565b6020815260006119166020830184614784565b6000602082840312156147d557600080fd5b813561191681614625565b6001600160a01b038116811461128857600080fd5b6000806040838503121561480857600080fd5b8235614813816147e0565b946020939093013593505050565b6000806040838503121561483457600080fd5b823561481381614625565b60008060006060848603121561485457600080fd5b833561485f816147e0565b9250602084013561486f816147e0565b929592945050506040919091013590565b60006020828403121561489257600080fd5b8135611916816147e0565b6000806000606084860312156148b257600080fd5b505081359360208301359350604090920135919050565b801515811461128857600080fd5b60008060008060008060a087890312156148f057600080fd5b86356148fb81614625565b955060208701359450604087013593506060870135614919816148c9565b925060808701356001600160401b0381111561493457600080fd5b61471c89828a01614635565b60008060006040848603121561495557600080fd5b833561496081614625565b925060208401356001600160401b0381111561497b57600080fd5b61498786828701614635565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156149d2576149d2614994565b604052919050565b60006001600160401b038211156149f3576149f3614994565b50601f01601f191660200190565b600082601f830112614a1257600080fd5b8135614a25614a20826149da565b6149aa565b818152846020838601011115614a3a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215614a6c57600080fd5b8335614a7781614625565b925060208401356001600160401b03811115614a9257600080fd5b614a9e86828701614a01565b925050614aad6040850161467d565b90509250925092565b600060608284031215614ac857600080fd5b50919050565b600080600080600060a08688031215614ae657600080fd5b8535614af1816147e0565b94506020860135614b0181614625565b9350604086013592506060860135915060808601356001600160401b03811115614b2a57600080fd5b614b3688828901614ab6565b9150509295509295909350565b60008060008060008060008060e0898b031215614b5f57600080fd5b8835614b6a816147e0565b97506020890135614b7a81614625565b9650604089013595506060890135945060808901356001600160401b0380821115614ba457600080fd5b614bb08c838d01614635565b9096509450849150614bc460a08c0161467d565b935060c08b0135915080821115614bda57600080fd5b50614be78b828c01614ab6565b9150509295985092959890939650565b6001600160a01b0391909116815260200190565b60008060408385031215614c1e57600080fd5b8235614c2981614625565b91506020830135614c3981614625565b809150509250929050565b600080600080600080600080600060e08a8c031215614c6257600080fd5b8935614c6d81614625565b985060208a0135975060408a0135965060608a01356001600160401b0380821115614c9757600080fd5b614ca38d838e01614635565b9098509650869150614cb760808d0161467d565b955060a08c01359150614cc9826148c9565b90935060c08b01359080821115614cdf57600080fd5b50614cec8c828d01614635565b915080935050809150509295985092959850929598565b60008060008060008060c08789031215614d1c57600080fd5b86359550602087013594506040870135614d3581614625565b93506060870135614d45816147e0565b925060808701356001600160401b03811115614d6057600080fd5b614d6c89828a01614a01565b92505060a0870135614d7d816148c9565b809150509295509295509295565b60008060008060008060c08789031215614da457600080fd5b86359550602087013594506040870135614dbd81614625565b9350606087013592506080870135614dd4816147e0565b915060a0870135614d7d816148c9565b600060208284031215614df657600080fd5b5035919050565b600080600080600060808688031215614e1557600080fd5b8535614e2081614625565b94506020860135614e3081614625565b93506040860135925060608601356001600160401b03811115614e5257600080fd5b614e5e88828901614635565b969995985093965092949392505050565b60008060408385031215614e8257600080fd5b8235614e8d816147e0565b91506020830135614c39816147e0565b600080600060608486031215614eb257600080fd5b8335614ebd81614625565b9250602084013561486f81614625565b600060208284031215614edf57600080fd5b8135611916816148c9565b6000806000806000806000806000806101008b8d031215614f0a57600080fd5b8a35614f1581614625565b995060208b01356001600160401b0380821115614f3157600080fd5b614f3d8e838f01614635565b909b509950899150614f5160408e0161467d565b985060608d0135975060808d01359150614f6a826147e0565b90955060a08c0135945060c08c01359080821115614f8757600080fd5b50614f948d828e01614635565b9150809450508092505060e08b013590509295989b9194979a5092959850565b60008060008060808587031215614fca57600080fd5b8435614fd581614625565b93506020850135614fe581614625565b92506040850135614ff5816147e0565b9396929550929360600135925050565b600181811c9082168061501957607f821691505b602082108103614ac857634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b60006020828403121561505b57600080fd5b8151611916816147e0565b60006020828403121561507857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156150af576150af61507f565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826150d9576150d96150b4565b500490565b600082198211156150f1576150f161507f565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff8416815260406020820152600061259d6040830184866150f6565b6000808335601e1984360301811261515457600080fd5b8301803591506001600160401b0382111561516e57600080fd5b60200191503681900382131561467657600080fd5b60006020828403121561519557600080fd5b815161191681614625565b6000828210156151b2576151b261507f565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f82111561350057600081815260208120601f850160051c810160208610156152045750805b601f850160051c820191505b8181101561159657828155600101615210565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561525157615251614994565b6152658161525f8454615005565b846151dd565b602080601f83116001811461529457600084156152825750858301515b61528c8582615223565b865550611596565b600085815260208120601f198616915b828110156152c3578886015182559484019460019091019084016152a4565b50858210156152e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff80881683528087166020840152508460408301526080606083015261457c6080830184866150f6565b61ffff8616815260806020820152600061533d6080830186886150f6565b6001600160401b0394909416604083015250606001529392505050565b61ffff8916815260c06020820152600061537860c08301898b6150f6565b6001600160401b038816604084015286606084015285608084015282810360a08401526153a68185876150f6565b9b9a5050505050505050505050565b6001600160401b038311156153cc576153cc614994565b6153e0836153da8354615005565b836151dd565b6000601f84116001811461540e57600085156153fc5750838201355b6154068682615223565b845550611012565b600083815260209020601f19861690835b8281101561543f578685013582556020948501946001909201910161541f565b508682101561545c5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561548057600080fd5b81516001600160401b0381111561549657600080fd5b8201601f810184136154a757600080fd5b80516154b5614a20826149da565b8181528560208385010111156154ca57600080fd5b61259d826020830160208601614758565b61ffff851681526080602082015260006154f86080830186614784565b6001600160401b0385166040840152828103606084015261457c8185614784565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061554790830186614784565b841515606084015282810360808401526155618185614784565b98975050505050505050565b6000806040838503121561558057600080fd5b505080516020909101519092909150565b60208082526019908201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b604082015260600190565b61ffff8716815260c0602082015260006155e160c0830188614784565b82810360408401526155f38188614784565b6001600160a01b0387811660608601528616608085015283810360a0850152905061561e8185614784565b9998505050505050505050565b6000825161563d818460208701614758565b9190910192915050565b61ffff8616815260a06020820152600061566460a0830187614784565b6001600160401b038616604084015282810360608401526156858186614784565b905082810360808401526155618185614784565b600080600080600060a086880312156156b157600080fd5b85516156bc81614625565b602087015160408801516060890151608090990151929a91995097965090945092505050565b600080600080600080600060e0888a0312156156fd57600080fd5b875161570881614625565b809750506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161573d816147e0565b8091505092959891949750929550565b600061010061ffff8b16835280602084015261576b8184018b614784565b6001600160401b038a166040850152606084018990526001600160a01b038816608085015260a0840187905283810360c085015290506157ab8186614784565b9150508260e08301529998505050505050505050565b6060815260006157d46060830186614784565b6001600160401b039490941660208301525060400152919050565b6000826157fe576157fe6150b4565b500690565b60ff60f81b8760f81b16815285600182015260006001600160401b0360c01b808760c01b166021840152856029840152808560c01b166049840152508251615852816051850160208701614758565b91909101605101979650505050505050565b60006020828403121561587657600080fd5b8151611916816148c9565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60208082526018908201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b60408201526060019056fed81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59abf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bfddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c3adc35686d4791d3500e3a012c125e52374a4b6032e6b4946243f628dbb38b464736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106103925760003560e01c806376203b48116101de578063bd92ab6b11610103578063df2a5b3b1161009b578063df2a5b3b14610b94578063e6a20ae614610bb4578063eab45d9c14610bc9578063eaffd49a14610be9578063eb8d72b714610c09578063ed629c5c14610c29578063f2fde38b14610c43578063f5ecbdbc14610c63578063fc0c546a14610c8357600080fd5b8063bd92ab6b14610aa1578063bf376c7a14610ab4578063c446183414610ad4578063c77c297214610aea578063c968ae0a14610b01578063cbed8b9c14610b21578063d1deba1f14610b41578063dd62ed3e14610b54578063de40657714610b7457600080fd5b80639f38369a116101765780639f38369a14610975578063a457c2d714610995578063a4c51df5146109b5578063a6c3d165146109d5578063a9059cbb146109f5578063ae9db24314610a15578063b0f67a3514610a28578063b353aaa714610a4d578063baf3292d14610a8157600080fd5b806376203b481461080f578063785e9e8614610822578063857749b01461084f5780638cfd8f5c146108835780638da5cb5b146108bb5780639358928b146108d9578063950c8a74146108ee57806395d89b411461090e5780639bdb98121461092357600080fd5b8063365260b4116102c45780635bfeaa051161025c5780635bfeaa051461070f57806366ad5c8a14610725578063695ef6bf146107455780636ef7980b1461075857806370a082311461076e578063715018a6146107a457806373cfc6b2146107b957806374fd4b98146107da5780637533d788146107ef57600080fd5b8063365260b4146105b457806339509351146105e957806339f47693146106095780633d8b38f6146106295780633f1f4fa41461064957806342d65a8d1461067657806344770515146106965780634c42899a146106ab5780635b8c41e6146106c057600080fd5b806310ddb1371161033757806310ddb137146104c4578063121dbc7c146104e457806313114a9d146104fa578063138cc18f1461051057806318160ddd1461052557806323b872dd1461053a5780632479d8631461055a578063313ce5671461056d578063317dbba81461059457600080fd5b80621d35671461039e57806254af3a146103c057806301ffc9a7146103e9578063069fd8491461041957806306fdde031461044257806307e0db1714610464578063095ea7b3146104845780630df37483146104a457600080fd5b3661039957005b600080fd5b3480156103aa57600080fd5b506103be6103b9366004614699565b610c96565b005b3480156103cc57600080fd5b506103d660105481565b6040519081526020015b60405180910390f35b3480156103f557600080fd5b5061040961040436600461472e565b610ec7565b60405190151581526020016103e0565b34801561042557600080fd5b5061042f61030381565b60405161ffff90911681526020016103e0565b34801561044e57600080fd5b50610457610efe565b6040516103e091906147b0565b34801561047057600080fd5b506103be61047f3660046147c3565b610f90565b34801561049057600080fd5b5061040961049f3660046147f5565b611019565b3480156104b057600080fd5b506103be6104bf366004614821565b611031565b3480156104d057600080fd5b506103be6104df3660046147c3565b611050565b3480156104f057600080fd5b5061042f61030481565b34801561050657600080fd5b506103d6600e5481565b34801561051c57600080fd5b506103be6110a8565b34801561053157600080fd5b50600a546103d6565b34801561054657600080fd5b5061040961055536600461483f565b61114b565b6103be610568366004614880565b61116f565b34801561057957600080fd5b5061058261128b565b60405160ff90911681526020016103e0565b3480156105a057600080fd5b506103d66105af36600461489d565b6112aa565b3480156105c057600080fd5b506105d46105cf3660046148d7565b6112c9565b604080519283526020830191909152016103e0565b3480156105f557600080fd5b506104096106043660046147f5565b61131e565b34801561061557600080fd5b506103be6106243660046147f5565b611340565b34801561063557600080fd5b50610409610644366004614940565b611370565b34801561065557600080fd5b506103d66106643660046147c3565b60036020526000908152604090205481565b34801561068257600080fd5b506103be610691366004614940565b61143c565b3480156106a257600080fd5b506103d6600081565b3480156106b757600080fd5b50610582600081565b3480156106cc57600080fd5b506103d66106db366004614a57565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561071b57600080fd5b5061042f61030581565b34801561073157600080fd5b506103be610740366004614699565b6114c2565b6103be610753366004614ace565b61159e565b34801561076457600080fd5b5061042f61030281565b34801561077a57600080fd5b506103d6610789366004614880565b6001600160a01b031660009081526008602052604090205490565b3480156107b057600080fd5b506103be611609565b3480156107c557600080fd5b50600d5461040990600160a01b900460ff1681565b3480156107e657600080fd5b5061042f61161b565b3480156107fb57600080fd5b5061045761080a3660046147c3565b6116a4565b6103be61081d366004614b43565b61173e565b34801561082e57600080fd5b50600f54610842906001600160a01b031681565b6040516103e09190614bf7565b34801561085b57600080fd5b506105827f000000000000000000000000000000000000000000000000000000000000000081565b34801561088f57600080fd5b506103d661089e366004614c0b565b600260209081526000928352604080842090915290825290205481565b3480156108c757600080fd5b506000546001600160a01b0316610842565b3480156108e557600080fd5b506103d66117ed565b3480156108fa57600080fd5b50600454610842906001600160a01b031681565b34801561091a57600080fd5b506104576117f8565b34801561092f57600080fd5b5061040961093e366004614a57565b6007602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205460ff1681565b34801561098157600080fd5b506104576109903660046147c3565b611807565b3480156109a157600080fd5b506104096109b03660046147f5565b61191d565b3480156109c157600080fd5b506105d46109d0366004614c44565b611998565b3480156109e157600080fd5b506103be6109f0366004614940565b611a27565b348015610a0157600080fd5b50610409610a103660046147f5565b611ab0565b6103be610a23366004614d03565b611abe565b348015610a3457600080fd5b506011546108429061010090046001600160a01b031681565b348015610a5957600080fd5b506108427f000000000000000000000000000000000000000000000000000000000000000081565b348015610a8d57600080fd5b506103be610a9c366004614880565b611b74565b6103be610aaf366004614d8b565b611bd2565b348015610ac057600080fd5b506103be610acf3660046147f5565b611d35565b348015610ae057600080fd5b506103d661271081565b348015610af657600080fd5b506010544614610409565b348015610b0d57600080fd5b506103d6610b1c366004614de4565b611e4f565b348015610b2d57600080fd5b506103be610b3c366004614dfd565b611f52565b6103be610b4f366004614699565b611fdc565b348015610b6057600080fd5b506103d6610b6f366004614e6f565b6121f2565b348015610b8057600080fd5b50600d54610842906001600160a01b031681565b348015610ba057600080fd5b506103be610baf366004614e9d565b61221d565b348015610bc057600080fd5b50610582600181565b348015610bd557600080fd5b506103be610be4366004614ecd565b6122cf565b348015610bf557600080fd5b506103be610c04366004614eea565b612318565b348015610c1557600080fd5b506103be610c24366004614940565b612425565b348015610c3557600080fd5b506006546104099060ff1681565b348015610c4f57600080fd5b506103be610c5e366004614880565b61247f565b348015610c6f57600080fd5b50610457610c7e366004614fb4565b6124f5565b348015610c8f57600080fd5b5030610842565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d135760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526001602052604081208054610d3190615005565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5d90615005565b8015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b50505050509050805186869050148015610dc5575060008151115b8015610ded575080516020820120604051610de39088908890615039565b6040518091039020145b610e485760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610d0a565b610ebe8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506125a692505050565b50505050505050565b60006001600160e01b03198216631f7ecdf760e01b1480610ef857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600b8054610f0d90615005565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3990615005565b8015610f865780601f10610f5b57610100808354040283529160200191610f86565b820191906000526020600020905b815481529060010190602001808311610f6957829003601f168201915b5050505050905090565b610f9861261f565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b5050505050565b600033611027818585612679565b5060019392505050565b61103961261f565b61ffff909116600090815260036020526040902055565b61105861261f565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610fe4565b60105446146110ca576040516358eebedd60e11b815260040160405180910390fd5b611149601160019054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190615049565b61279d565b565b6000336111598582856127f1565b61116485858561286b565b506001949350505050565b6010544614611191576040516358eebedd60e11b815260040160405180910390fd5b61128881601160019054906101000a90046001600160a01b03166001600160a01b031663a52dbfef6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c9190615066565b601160019054906101000a90046001600160a01b03166001600160a01b0316632c5b4e4d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561125f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112839190615066565b612a04565b50565b60115460009060ff1681036112a05750601290565b5060115460ff1690565b6000826112b78584615095565b6112c191906150ca565b949350505050565b60008061130f8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ab392505050565b91509150965096945050505050565b60003361102781858561133183836121f2565b61133b91906150de565b612679565b6010544614611362576040516358eebedd60e11b815260040160405180910390fd5b61136c8282612ba7565b5050565b61ffff83166000908152600160205260408120805482919061139190615005565b80601f01602080910402602001604051908101604052809291908181526020018280546113bd90615005565b801561140a5780601f106113df5761010080835404028352916020019161140a565b820191906000526020600020905b8154815290600101906020018083116113ed57829003601f168201915b505050505090508383604051611421929190615039565b60405180910390208180519060200120149150509392505050565b61144461261f565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906114949086908690869060040161511f565b600060405180830381600087803b1580156114ae57600080fd5b505af1158015610ebe573d6000803e3d6000fd5b3330146115205760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610d0a565b6115968686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612c2d92505050565b505050505050565b611596858585856115b26020870187614880565b6115c26040880160208901614880565b6115cf604089018961513d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d1892505050565b61161161261f565b6111496000612dc2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f9190615183565b905090565b600160205260009081526040902080546116bd90615005565b80601f01602080910402602001604051908101604052809291908181526020018280546116e990615005565b80156117365780601f1061170b57610100808354040283529160200191611736565b820191906000526020600020905b81548152906001019060200180831161171957829003601f168201915b505050505081565b6117e28888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061178b9150506020890189614880565b61179b60408a0160208b01614880565b6117a860408b018b61513d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e1292505050565b505050505050505050565b600061169f600a5490565b6060600c8054610f0d90615005565b61ffff811660009081526001602052604081208054606092919061182a90615005565b80601f016020809104026020016040519081016040528092919081815260200182805461185690615005565b80156118a35780601f10611878576101008083540402835291602001916118a3565b820191906000526020600020905b81548152906001019060200180831161188657829003601f168201915b5050505050905080516000036118fb5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610d0a565b61191660006014835161190e91906151a0565b839190612ed0565b9392505050565b6000338161192b82866121f2565b90508381101561198b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d0a565b6111648286868403612679565b600080611a158b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b81528e93508d9250908c908c9081908401838280828437600092019190915250612fdd92505050565b91509150995099975050505050505050565b611a2f61261f565b818130604051602001611a44939291906151b7565b60408051601f1981840301815291815261ffff8516600090815260016020522090611a6f9082615238565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611aa39392919061511f565b60405180910390a1505050565b60003361102781858561286b565b33600082611ace57610305611ad2565b6103035b336040805161ffff90931660208401528201526060810183905260808101899052600060a082015260c081018890526001600160a01b03861660e0820152610100016040516020818303038152906040529050611b33868233888834613098565b81336001600160a01b03168761ffff166000805160206158e38339815191528b604051611b6291815260200190565b60405180910390a45050505050505050565b611b7c61261f565b600480546001600160a01b0319166001600160a01b0383161790556040517f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90611bc7908390614bf7565b60405180910390a150565b6000339050611c64337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d9190615183565b838a61323d565b50600082611c7457610304611c78565b6103025b336040805161ffff9093166020840152820152606081018390526080810189905260a0810188905260c00160405160208183030381529060405290506000611ce38660408051600160f01b602082015260228082019390935281518082039093018352604201905290565b9050611cf3878333888534613098565b82336001600160a01b03168861ffff166000805160206158e38339815191528c604051611d2291815260200190565b60405180910390a4505050505050505050565b6010544614611d57576040516358eebedd60e11b815260040160405180910390fd5b61136c8282601160019054906101000a90046001600160a01b03166001600160a01b031663a52dbfef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd39190615066565b601160019054906101000a90046001600160a01b03166001600160a01b0316632c5b4e4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4a9190615066565b61326f565b6000611f48601160019054906101000a90046001600160a01b03166001600160a01b031663a52dbfef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb9190615066565b601160019054906101000a90046001600160a01b03166001600160a01b0316632c5b4e4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f429190615066565b846112aa565b610ef890836151a0565b611f5a61261f565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611fae90889088908890889088906004016152f1565b600060405180830381600087803b158015611fc857600080fd5b505af11580156117e2573d6000803e3d6000fd5b61ffff86166000908152600560205260408082209051611fff9088908890615039565b90815260408051602092819003830190206001600160401b0387166000908152925290205490508061207f5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610d0a565b808383604051612090929190615039565b6040518091039020146120ef5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610d0a565b61ffff871660009081526005602052604080822090516121129089908990615039565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f880182900482028301820190528682526121aa918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612c2d92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516121e195949392919061531f565b60405180910390a150505050505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b61222561261f565b6000811161226d5760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b6044820152606401610d0a565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611aa3565b6122d761261f565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001611bc7565b3330146123675760405162461bcd60e51b815260206004820152601f60248201527f4f4654436f72653a2063616c6c6572206d757374206265204f4654436f7265006044820152606401610d0a565b612372308686613324565b9350846001600160a01b03168a61ffff16600080516020615903833981519152866040516123a291815260200190565b60405180910390a3604051633fe79aed60e11b81526001600160a01b03861690637fcf35da9083906123e6908e908e908e908e908e908d908d908d9060040161535a565b600060405180830381600088803b15801561240057600080fd5b5087f1158015612414573d6000803e3d6000fd5b505050505050505050505050505050565b61242d61261f565b61ffff8316600090815260016020526040902061244b8284836153b5565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611aa39392919061511f565b61248761261f565b6001600160a01b0381166124ec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d0a565b61128881612dc2565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015612575573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261259d919081019061546e565b95945050505050565b6000806126095a60966366ad5c8a60e01b898989896040516024016125ce94939291906154db565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190613376565b9150915081611596576115968686868685613400565b6000546001600160a01b031633146111495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d0a565b6001600160a01b0383166126db5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d0a565b6001600160a01b03821661273c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d0a565b6001600160a01b0383811660008181526009602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600e54600f546127ba916001600160a01b0390911690839061349d565b6000600e8190556040519081527f790367a28f0e0ab0688b2b971a0d35c72b0fc7d750e2f574dd42b746eb67c0f190602001611bc7565b60006127fd84846121f2565b9050600019811461286557818110156128585760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d0a565b6128658484848403612679565b50505050565b6001600160a01b0383166128cf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d0a565b6001600160a01b0382166129315760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d0a565b6001600160a01b038316600090815260086020526040902054818110156129a95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d0a565b6001600160a01b038085166000818152600860205260408082208686039055928616808252908390208054860190559151600080516020615923833981519152906129f79086815260200190565b60405180910390a3612865565b34600003612a2557604051630db5837760e11b815260040160405180910390fd5b60008215612a62576000612a3a8484346112aa565b905080600e6000828254612a4e91906150de565b90915550612a5e905081346151a0565b9150505b612a6c8482613505565b6040518181526001600160a01b0385169033907f32771713d1bc9f76444ca8b47f67bb9a592b559397cf27cfea344efa0fdb7d8b906020015b60405180910390a350505050565b6000806000612b0187612ac5886135b4565b6040805160006020820152602181019390935260c09190911b6001600160c01b0319166041830152805160298184030181526049909201905290565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090612b58908b90309086908b908b90600401615519565b6040805180830381865afa158015612b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b98919061556d565b92509250509550959350505050565b612bb13382613622565b600d54600160a01b900460ff1615612bd257612bcd8282613744565b612be9565b600f54612be9906001600160a01b0316838361349d565b6040518181526001600160a01b0383169033907fbe8e6aacbb5d99c99f1992d91d807f570d0acacabee02374369ed42710dc66989060200160405180910390a35050565b6000612c398282613795565b9050610301198101612c5757612c5285833060016137f3565b611012565b610302198101612c6d57612c528583600161387e565b610303198101612c8457612c5285833060006137f3565b610304198101612c9a57612c528583600061387e565b612ca58260006139ff565b60ff16905080612cbb57612c5285858585613a5b565b6000198101612cd057612c5285858585613ad9565b60405162461bcd60e51b815260206004820152601e60248201527f4f4654436f726556323a20756e6b6e6f776e207061636b6574207479706500006044820152606401610d0a565b6000612d2687828481613ce2565b612d2f85613d5c565b509050612d3e8888888461323d565b905060008111612d605760405162461bcd60e51b8152600401610d0a90615591565b6000612d6f87612ac5846135b4565b9050612d7f888287878734613098565b86896001600160a01b03168961ffff166000805160206158e383398151915285604051612dae91815260200190565b60405180910390a450979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000612e2a896001846001600160401b038916613ce2565b612e3387613d5c565b509050612e428a8a8a8461323d565b905060008111612e645760405162461bcd60e51b8152600401610d0a90615591565b6000612e7b338a612e74856135b4565b8a8a613d84565b9050612e8b8a8287878734613098565b888b6001600160a01b03168b61ffff166000805160206158e383398151915285604051612eba91815260200190565b60405180910390a4509998505050505050505050565b606081612ede81601f6150de565b1015612f1d5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610d0a565b612f2782846150de565b84511015612f6b5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610d0a565b606082158015612f8a5760405191506000825260208201604052612fd4565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612fc3578051835260209283019201612fab565b5050858452601f01601f1916604052505b50949350505050565b6000806000612ff0338a612e748b6135b4565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090613047908d90309086908b908b90600401615519565b6040805180830381865afa158015613063573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613087919061556d565b925092505097509795505050505050565b61ffff8616600090815260016020526040812080546130b690615005565b80601f01602080910402602001604051908101604052809291908181526020018280546130e290615005565b801561312f5780601f106131045761010080835404028352916020019161312f565b820191906000526020600020905b81548152906001019060200180831161311257829003601f168201915b5050505050905080516000036131a05760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610d0a565b6131ab878751613dc5565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490613202908b9086908c908c908c908c906004016155c4565b6000604051808303818588803b15801561321b57600080fd5b505af115801561322f573d6000803e3d6000fd5b505050505050505050505050565b6000336001600160a01b038616811461325b5761325b8682856127f1565b6132658684613622565b5090949350505050565b81156132c55760006132828383866112aa565b905080600e600082825461329691906150de565b909155506132bf905033306132ab84886150de565b600f546001600160a01b0316929190613e36565b506132dd565b600f546132dd906001600160a01b0316333086613e36565b6132e78484613505565b6040518381526001600160a01b0385169033907f32771713d1bc9f76444ca8b47f67bb9a592b559397cf27cfea344efa0fdb7d8b90602001612aa5565b600033306001600160a01b038616148015906133525750806001600160a01b0316856001600160a01b031614155b15613362576133628582856127f1565b61336d85858561286b565b50909392505050565b6000606060008060008661ffff166001600160401b0381111561339b5761339b614994565b6040519080825280601f01601f1916602001820160405280156133c5576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156133e7578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051613431919061562b565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c9061348e9087908790879087908790615647565b60405180910390a15050505050565b6040516001600160a01b03831660248201526044810182905261350090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613e6e565b505050565b6001600160a01b03821661355b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d0a565b80600a600082825461356d91906150de565b90915550506001600160a01b038216600081815260086020908152604080832080548601905551848152600080516020615923833981519152910160405180910390a35050565b6000806135bf613f40565b6135c990846150ca565b90506001600160401b03811115610ef85760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f770000000000006044820152606401610d0a565b6001600160a01b0382166136825760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d0a565b6001600160a01b038216600090815260086020526040902054818110156136f65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d0a565b6001600160a01b03831660008181526008602090815260408083208686039055600a8054879003905551858152919291600080516020615923833981519152910160405180910390a3505050565b600080600080600085875af19050806135005760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b6044820152606401610d0a565b60006137a28260206150de565b835110156137ea5760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610d0a565b50016020015190565b60008060008580602001905181019061380c9190615699565b94509450509350506000846138215783613823565b305b9050613830883085613f64565b5061383e8284883085613f77565b806001600160a01b03168861ffff166000805160206159038339815191528560405161386c91815260200190565b60405180910390a35050505050505050565b60008060008060008680602001905181019061389a91906156e2565b96509650965096505095505060006138af8690565b90506138ca8386868a6138c257846138c4565b305b3061409c565b613957307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561392c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139509190615183565b308861323d565b50600061396787612ac5886135b4565b90506139868a8230866040518060200160405280600081525047613098565b30826001600160a01b03168b61ffff166000805160206158e3833981519152896040516139b591815260200190565b60405180910390a4816001600160a01b03168a61ffff16600080516020615903833981519152886040516139eb91815260200190565b60405180910390a350505050505050505050565b6000613a0c8260016150de565b83511015613a525760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610d0a565b50016001015190565b600080613a6783614148565b90925090506001600160a01b038216613a805761dead91505b6000613a8b826141a2565b9050613a98878483613f64565b9050826001600160a01b03168761ffff1660008051602061590383398151915283604051613ac891815260200190565b60405180910390a350505050505050565b6000806000806000613aea866141bf565b945094509450945094506000600760008b61ffff1661ffff16815260200190815260200160002089604051613b1f919061562b565b90815260408051602092819003830190206001600160401b038b166000908152925281205460ff169150613b52856141a2565b905081613bc057613b648b3083613f64565b61ffff8c16600090815260076020526040908190209051919250600191613b8c908d9061562b565b90815260408051602092819003830190206001600160401b038d16600090815292529020805460ff19169115159190911790555b6001600160a01b0386163b613c12577f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d86604051613bfe9190614bf7565b60405180910390a150505050505050612865565b8a8a8a8a8a8a868a60008a613c30578b6001600160401b0316613c32565b5a5b9050600080613c645a609663eaffd49a60e01b8e8e8e8d8d8d8d8d6040516024016125ce98979695949392919061574d565b915091508115613cbd578751602089012060405161ffff8d16907fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd88490613caf908e908e9086906157c1565b60405180910390a250613cca565b613cca8b8b8b8b85613400565b50505050505050505050505050505050505050505050565b60065460ff1615613cfe57613cf98484848461424b565b612865565b8151156128655760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b6064820152608401610d0a565b600080613d67613f40565b613d7190846157ef565b9050613d7d81846151a0565b9150915091565b6060600185856001600160a01b0389168587604051602001613dab96959493929190615803565b604051602081830303815290604052905095945050505050565b61ffff821660009081526003602052604081205490819003613de657506127105b808211156135005760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610d0a565b6040516001600160a01b03808516602483015283166044820152606481018290526128659085906323b872dd60e01b906084016134c9565b6000613ec3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661432a9092919063ffffffff16565b8051909150156135005780806020019051810190613ee19190615864565b6135005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d0a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000613f708383613505565b5092915050565b600d5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529084169063095ea7b3906044016020604051808303816000875af1158015613fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fee9190615864565b50600d54604051634d4d7cbd60e11b81526001600160a01b0390911690639a9af97a90614028908890869086908a90600090600401615881565b60408051808303816000875af1158015614046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406a919061556d565b50506040518481527fcd253788682cc9dd5efb9d890404e8dd9a7baac51389803c78889ac77e526c989060200161348e565b600d546040516311a5cc7760e31b81526001600160a01b0390911690638d2e63b8906140d4908890869086908a908a90600401615881565b60408051808303816000875af11580156140f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614116919061556d565b50506040518481527fe3f504c463a59f99e9ef10d056640f76473a05d4c5756532a68079c48949e7ea9060200161348e565b6000808061415684826139ff565b60ff16148015614167575082516029145b6141835760405162461bcd60e51b8152600401610d0a906158b0565b61418e83600d614339565b915061419b83602161439e565b9050915091565b60006141ac613f40565b610ef8906001600160401b038416615095565b6000808060608160016141d287836139ff565b60ff16146141f25760405162461bcd60e51b8152600401610d0a906158b0565b6141fd86600d614339565b935061420a86602161439e565b92506142178660296143fb565b945061422486604961439e565b9050614240605180885161423891906151a0565b889190612ed0565b915091939590929450565b600061425683614450565b61ffff8087166000908152600260209081526040808320938916835292905290812054919250906142889084906150de565b9050600081116142da5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610d0a565b808210156115965760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610d0a565b60606112c184846000856144ac565b60006143468260146150de565b8351101561438e5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610d0a565b500160200151600160601b900490565b60006143ab8260086150de565b835110156143f25760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610d0a565b50016008015190565b60006144088260206150de565b835110156137ea5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610d0a565b60006022825110156144a45760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610d0a565b506022015190565b60608247101561450d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d0a565b600080866001600160a01b03168587604051614529919061562b565b60006040518083038185875af1925050503d8060008114614566576040519150601f19603f3d011682016040523d82523d6000602084013e61456b565b606091505b509150915061457c87838387614587565b979650505050505050565b606083156145f65782516000036145ef576001600160a01b0385163b6145ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d0a565b50816112c1565b6112c1838381511561460b5781518083602001fd5b8060405162461bcd60e51b8152600401610d0a91906147b0565b61ffff8116811461128857600080fd5b60008083601f84011261464757600080fd5b5081356001600160401b0381111561465e57600080fd5b60208301915083602082850101111561467657600080fd5b9250929050565b80356001600160401b038116811461469457600080fd5b919050565b600080600080600080608087890312156146b257600080fd5b86356146bd81614625565b955060208701356001600160401b03808211156146d957600080fd5b6146e58a838b01614635565b90975095508591506146f960408a0161467d565b9450606089013591508082111561470f57600080fd5b5061471c89828a01614635565b979a9699509497509295939492505050565b60006020828403121561474057600080fd5b81356001600160e01b03198116811461191657600080fd5b60005b8381101561477357818101518382015260200161475b565b838111156128655750506000910152565b6000815180845261479c816020860160208601614758565b601f01601f19169290920160200192915050565b6020815260006119166020830184614784565b6000602082840312156147d557600080fd5b813561191681614625565b6001600160a01b038116811461128857600080fd5b6000806040838503121561480857600080fd5b8235614813816147e0565b946020939093013593505050565b6000806040838503121561483457600080fd5b823561481381614625565b60008060006060848603121561485457600080fd5b833561485f816147e0565b9250602084013561486f816147e0565b929592945050506040919091013590565b60006020828403121561489257600080fd5b8135611916816147e0565b6000806000606084860312156148b257600080fd5b505081359360208301359350604090920135919050565b801515811461128857600080fd5b60008060008060008060a087890312156148f057600080fd5b86356148fb81614625565b955060208701359450604087013593506060870135614919816148c9565b925060808701356001600160401b0381111561493457600080fd5b61471c89828a01614635565b60008060006040848603121561495557600080fd5b833561496081614625565b925060208401356001600160401b0381111561497b57600080fd5b61498786828701614635565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156149d2576149d2614994565b604052919050565b60006001600160401b038211156149f3576149f3614994565b50601f01601f191660200190565b600082601f830112614a1257600080fd5b8135614a25614a20826149da565b6149aa565b818152846020838601011115614a3a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215614a6c57600080fd5b8335614a7781614625565b925060208401356001600160401b03811115614a9257600080fd5b614a9e86828701614a01565b925050614aad6040850161467d565b90509250925092565b600060608284031215614ac857600080fd5b50919050565b600080600080600060a08688031215614ae657600080fd5b8535614af1816147e0565b94506020860135614b0181614625565b9350604086013592506060860135915060808601356001600160401b03811115614b2a57600080fd5b614b3688828901614ab6565b9150509295509295909350565b60008060008060008060008060e0898b031215614b5f57600080fd5b8835614b6a816147e0565b97506020890135614b7a81614625565b9650604089013595506060890135945060808901356001600160401b0380821115614ba457600080fd5b614bb08c838d01614635565b9096509450849150614bc460a08c0161467d565b935060c08b0135915080821115614bda57600080fd5b50614be78b828c01614ab6565b9150509295985092959890939650565b6001600160a01b0391909116815260200190565b60008060408385031215614c1e57600080fd5b8235614c2981614625565b91506020830135614c3981614625565b809150509250929050565b600080600080600080600080600060e08a8c031215614c6257600080fd5b8935614c6d81614625565b985060208a0135975060408a0135965060608a01356001600160401b0380821115614c9757600080fd5b614ca38d838e01614635565b9098509650869150614cb760808d0161467d565b955060a08c01359150614cc9826148c9565b90935060c08b01359080821115614cdf57600080fd5b50614cec8c828d01614635565b915080935050809150509295985092959850929598565b60008060008060008060c08789031215614d1c57600080fd5b86359550602087013594506040870135614d3581614625565b93506060870135614d45816147e0565b925060808701356001600160401b03811115614d6057600080fd5b614d6c89828a01614a01565b92505060a0870135614d7d816148c9565b809150509295509295509295565b60008060008060008060c08789031215614da457600080fd5b86359550602087013594506040870135614dbd81614625565b9350606087013592506080870135614dd4816147e0565b915060a0870135614d7d816148c9565b600060208284031215614df657600080fd5b5035919050565b600080600080600060808688031215614e1557600080fd5b8535614e2081614625565b94506020860135614e3081614625565b93506040860135925060608601356001600160401b03811115614e5257600080fd5b614e5e88828901614635565b969995985093965092949392505050565b60008060408385031215614e8257600080fd5b8235614e8d816147e0565b91506020830135614c39816147e0565b600080600060608486031215614eb257600080fd5b8335614ebd81614625565b9250602084013561486f81614625565b600060208284031215614edf57600080fd5b8135611916816148c9565b6000806000806000806000806000806101008b8d031215614f0a57600080fd5b8a35614f1581614625565b995060208b01356001600160401b0380821115614f3157600080fd5b614f3d8e838f01614635565b909b509950899150614f5160408e0161467d565b985060608d0135975060808d01359150614f6a826147e0565b90955060a08c0135945060c08c01359080821115614f8757600080fd5b50614f948d828e01614635565b9150809450508092505060e08b013590509295989b9194979a5092959850565b60008060008060808587031215614fca57600080fd5b8435614fd581614625565b93506020850135614fe581614625565b92506040850135614ff5816147e0565b9396929550929360600135925050565b600181811c9082168061501957607f821691505b602082108103614ac857634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b60006020828403121561505b57600080fd5b8151611916816147e0565b60006020828403121561507857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156150af576150af61507f565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826150d9576150d96150b4565b500490565b600082198211156150f1576150f161507f565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff8416815260406020820152600061259d6040830184866150f6565b6000808335601e1984360301811261515457600080fd5b8301803591506001600160401b0382111561516e57600080fd5b60200191503681900382131561467657600080fd5b60006020828403121561519557600080fd5b815161191681614625565b6000828210156151b2576151b261507f565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f82111561350057600081815260208120601f850160051c810160208610156152045750805b601f850160051c820191505b8181101561159657828155600101615210565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561525157615251614994565b6152658161525f8454615005565b846151dd565b602080601f83116001811461529457600084156152825750858301515b61528c8582615223565b865550611596565b600085815260208120601f198616915b828110156152c3578886015182559484019460019091019084016152a4565b50858210156152e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff80881683528087166020840152508460408301526080606083015261457c6080830184866150f6565b61ffff8616815260806020820152600061533d6080830186886150f6565b6001600160401b0394909416604083015250606001529392505050565b61ffff8916815260c06020820152600061537860c08301898b6150f6565b6001600160401b038816604084015286606084015285608084015282810360a08401526153a68185876150f6565b9b9a5050505050505050505050565b6001600160401b038311156153cc576153cc614994565b6153e0836153da8354615005565b836151dd565b6000601f84116001811461540e57600085156153fc5750838201355b6154068682615223565b845550611012565b600083815260209020601f19861690835b8281101561543f578685013582556020948501946001909201910161541f565b508682101561545c5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561548057600080fd5b81516001600160401b0381111561549657600080fd5b8201601f810184136154a757600080fd5b80516154b5614a20826149da565b8181528560208385010111156154ca57600080fd5b61259d826020830160208601614758565b61ffff851681526080602082015260006154f86080830186614784565b6001600160401b0385166040840152828103606084015261457c8185614784565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061554790830186614784565b841515606084015282810360808401526155618185614784565b98975050505050505050565b6000806040838503121561558057600080fd5b505080516020909101519092909150565b60208082526019908201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b604082015260600190565b61ffff8716815260c0602082015260006155e160c0830188614784565b82810360408401526155f38188614784565b6001600160a01b0387811660608601528616608085015283810360a0850152905061561e8185614784565b9998505050505050505050565b6000825161563d818460208701614758565b9190910192915050565b61ffff8616815260a06020820152600061566460a0830187614784565b6001600160401b038616604084015282810360608401526156858186614784565b905082810360808401526155618185614784565b600080600080600060a086880312156156b157600080fd5b85516156bc81614625565b602087015160408801516060890151608090990151929a91995097965090945092505050565b600080600080600080600060e0888a0312156156fd57600080fd5b875161570881614625565b809750506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161573d816147e0565b8091505092959891949750929550565b600061010061ffff8b16835280602084015261576b8184018b614784565b6001600160401b038a166040850152606084018990526001600160a01b038816608085015260a0840187905283810360c085015290506157ab8186614784565b9150508260e08301529998505050505050505050565b6060815260006157d46060830186614784565b6001600160401b039490941660208301525060400152919050565b6000826157fe576157fe6150b4565b500690565b60ff60f81b8760f81b16815285600182015260006001600160401b0360c01b808760c01b166021840152856029840152808560c01b166049840152508251615852816051850160208701614758565b91909101605101979650505050505050565b60006020828403121561587657600080fd5b8151611916816148c9565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60208082526018908201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b60408201526060019056fed81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59abf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bfddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c3adc35686d4791d3500e3a012c125e52374a4b6032e6b4946243f628dbb38b464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "circulatingSupply()": {
        "details": "returns the circulating amount of tokens on current chain"
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "estimateSendFee(uint16,bytes32,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendFrom(address,uint16,bytes32,uint256,(address,address,bytes))": {
        "details": "send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "token()": {
        "details": "returns the address of the ERC20 token"
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unwrap(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to unwrap.",
          "_toAddress": "The address to unwrap the tokens to."
        }
      },
      "wrap(address,uint256)": {
        "details": "Since it can be executed only on the main chain, if an address exists on the OP chain it will not allowed to wrap.",
        "params": {
          "_amount": "The amount of ERC20 to wrap.",
          "_toAddress": "The address to wrap the ERC20 to."
        }
      },
      "wrapNative(address)": {
        "details": "Since it can be executed only on the host chain, if an address exists on the linked chain it will not allowed to wrap.",
        "params": {
          "_toAddress": "The address to wrap the tokens to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "TOFT_YB_ETHDeposit()": [
        {
          "notice": "Error while depositing ETH assets to YieldBox."
        }
      ],
      "TOFT_ZeroAmount()": [
        {
          "notice": "A zero amount was found"
        }
      ],
      "TOFT__NotHostChain()": [
        {
          "notice": "Code executed not on main chain."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Decimal number of the ERC20"
      },
      "erc20()": {
        "notice": "The ERC20 to wrap."
      },
      "harvestFees()": {
        "notice": "Harvest the fees collected by the contract. Called only on host chain."
      },
      "hostChainID()": {
        "notice": "The host chain ID of the ERC20"
      },
      "isHostChain()": {
        "notice": "Check if the current chain is the host chain of the ERC20."
      },
      "isNative()": {
        "notice": "If this wrapper is for an ERC20 or a native token."
      },
      "tapiocaWrapper()": {
        "notice": "The TapiocaWrapper contract, owner of this contract."
      },
      "totalFees()": {
        "notice": "Total fees amassed by this contract, in `erc20`."
      },
      "unwrap(address,uint256)": {
        "notice": "Unwrap an ERC20/Native with a 1:1 ratio. Called only on host chain."
      },
      "wrap(address,uint256)": {
        "notice": "Wrap an ERC20 with a 1:1 ratio with a fee if existing."
      },
      "wrapNative(address)": {
        "notice": "Wrap a native token with a 1:1 ratio with a fee if existing."
      },
      "wrappedAmount(uint256)": {
        "notice": "Return the output amount of an ERC20 token wrap operation."
      },
      "yieldBox()": {
        "notice": "The YieldBox address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 6369,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 6373,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 6375,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "precrime",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6912,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "failedMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 7461,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "useCustomAdapterParams",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 7469,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "creditedPackets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool)))"
      },
      {
        "astId": 128,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_allowances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 1668,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "yieldBox",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IYieldBox)3923"
      },
      {
        "astId": 1671,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "isNative",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 1686,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "totalFees",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1690,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "erc20",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IERC20)777"
      },
      {
        "astId": 1693,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "hostChainID",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1696,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "_decimalCache",
        "offset": 0,
        "slot": "17",
        "type": "t_uint8"
      },
      {
        "astId": 3227,
        "contract": "contracts/TapiocaOFT.sol:TapiocaOFT",
        "label": "tapiocaWrapper",
        "offset": 1,
        "slot": "17",
        "type": "t_contract(TapiocaWrapper)3758"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)777": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IYieldBox)3923": {
        "encoding": "inplace",
        "label": "contract IYieldBox",
        "numberOfBytes": "20"
      },
      "t_contract(TapiocaWrapper)3758": {
        "encoding": "inplace",
        "label": "contract TapiocaWrapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bool)"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool))"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}