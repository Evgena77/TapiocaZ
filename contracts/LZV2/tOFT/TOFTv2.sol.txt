// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.22;

//LZ
import {IMessagingChannel} from "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol";
import {MessagingReceipt, OFTReceipt} from "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol";
import {OAppReceiver} from "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol";
import {Origin} from "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol";
import {OFTCore} from "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFT.sol";

// External
import {ERC20Permit} from "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol";
import {Pausable} from "@openzeppelin/contracts/security/Pausable.sol";

// Tapioca
import {ERC20PermitStruct, ITOFTv2, LZSendParam} from "./ITOFTv2.sol";
import {ModuleManager} from "./modules/ModuleManager.sol";
import {BaseTOFTv2} from "./BaseTOFTv2.sol";

contract TOFTV2 is BaseTOFTv2, ModuleManager, ERC20Permit, Pausable {
    // ==========
    // *VARS*
    // ==========

    // ==========
    // *ERRORS*
    // ==========

    // ==========
    // *EVENTS*
    // ==========

    /// =====================
    /// Module setup
    /// =====================

    /**
     * @dev Fallback function should handle calls made by endpoint, which should go to the receiver module.
     */
    fallback() external payable {
        //TODO: add code
        /// @dev Call the receiver module on fallback, assume it's gonna be called by endpoint.
        // _executeModule(uint8(ITOFTv2.Module.TOFTReceiver), msg.data, false);
    }

    receive() external payable {}
}
